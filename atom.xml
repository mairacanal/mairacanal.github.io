<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Maíra Canal</title>
        <description>Blogging about development</description>
        <link>https://mairacanal.github.io</link>
        <atom:link href="https://mairacanal.github.io/atom.xml" rel="self" type="application/rss+xml" />
        <lastBuildDate>Tue, 16 May 2023 12:00:00 +0000</lastBuildDate>
        
            <item>
                <title>Cross-Compiling CTS for the Raspberry Pi 4</title>
                
                <description>&lt;p&gt;This blogpost was actually written partially in November/December 2022 while I was developing IGT tests for the V3D driver.
I ended up leaving it aside for a while and now, I came back and finished the last loose ends.
That’s why I’m referencing the time where I was fighting against V3D’s noop jobs.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Currently, during my &lt;a href=&quot;https://www.igalia.com/coding-experience/&quot;&gt;Igalia Coding Experience&lt;/a&gt;, I’m working on the V3D’s IGT tests and therefore, I’m dealing a lot with the Raspberry Pi 4.
During the project, I had a real struggle to design the tests for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_submit_cl&lt;/code&gt; ioctl, as I was not capable of submit a proper noop job to the GPU.&lt;/p&gt;

&lt;p&gt;In order to debug the tests, my mentor &lt;a href=&quot;https://melissawen.github.io/&quot;&gt;Melissa Wen&lt;/a&gt; suggested to me to run the CTS tests to reproduce a noop job and debug it through Mesa.
I cloned the CTS repository into my Raspberry Pi 4 and I tried to compile, but my Raspberry Pi 4 went OOM.
This sent me on a journey to cross-compile CTS for the Raspberry Pi 4.
I decided to compile this journey into this blogpost.&lt;/p&gt;

&lt;p&gt;During this blogpost, I’m using a Raspbian OS with desktop 64-bit.&lt;/p&gt;

&lt;h1 id=&quot;installing-mesa&quot;&gt;Installing Mesa&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;First, you need to install Mesa on the Raspberry Pi 4.
I decided to compile Mesa on the Raspberry Pi 4 itself, but maybe one day, I can write a blogpost about cross-compiling Mesa.&lt;/p&gt;

&lt;h2 id=&quot;1-installing-libdrm&quot;&gt;1. Installing libdrm&lt;/h2&gt;

&lt;p&gt;Currently, the Raspbian repositories only provide &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libdrm 2.4.104&lt;/code&gt; and Mesa’s main branch needs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libdrm &amp;gt;=2.4.109&lt;/code&gt;.
So, first, let’s install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libdrm 2.4.109&lt;/code&gt; on the Raspberry Pi 4.&lt;/p&gt;

&lt;p&gt;First, let’s make sure that you have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;meson&lt;/code&gt; installed on your RPi4.
We will need &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;meson&lt;/code&gt; to build &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libdrm&lt;/code&gt; and Mesa.
I’m installing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;meson&lt;/code&gt; through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip3&lt;/code&gt; because we need a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;meson&lt;/code&gt; version greater than 0.60 to build Mesa.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# On the Raspberry Pi 4&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pip3 &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;meson
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, you can install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libdrm 2.4.109&lt;/code&gt; on the RPi4.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# On the Raspberry Pi 4&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://dri.freedesktop.org/libdrm/libdrm-2.4.114.tar.xz
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xvpf libdrm-2.4.114.tar.xz
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;libdrm-2.4.114
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;build
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;build
&lt;span class=&quot;nv&quot;&gt;$ FLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-O2 -march=armv8-a+crc+simd -mtune=cortex-a72&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;CXXFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-O2 -march=armv8-a+crc+simd -mtune=cortex-a72&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    meson &lt;span class=&quot;nt&quot;&gt;-Dudev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Dvc4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;enabled&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Dintel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;disabled&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Dvmwgfx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;disabled&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-Dradeon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;disabled&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Damdgpu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;disabled&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Dnouveau&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;disabled&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Dfreedreno&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;disabled&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-Dinstall-test-programs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; ..
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ninja &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-going-back-to-mesa&quot;&gt;2. Going back to Mesa&lt;/h2&gt;

&lt;p&gt;So, now let’s install Mesa.
During this blogpost, I will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${USER}&lt;/code&gt; as the username on the machine.
Note that, in order to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt build-dep mesa&lt;/code&gt;, you will have to uncomment some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deb-src&lt;/code&gt; on the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/apt/sources.list&lt;/code&gt; and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt update&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# On the Raspberry Pi 4&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install Mesa&apos;s build dependencies&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt build-dep mesa

&lt;span class=&quot;c&quot;&gt;# Build and Install Mesa&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://gitlab.freedesktop.org/mesa/mesa
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;mesa
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;builddir
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;installdir
&lt;span class=&quot;nv&quot;&gt;$ CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-mcpu=cortex-a72&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CXXFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-mcpu=cortex-a72&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    meson &lt;span class=&quot;nt&quot;&gt;-Dprefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/home/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/mesa/installdir&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;platforms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;x11 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; vulkan-drivers&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;broadcom &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; gallium-drivers&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kmsro,v3d,vc4 builddir
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;builddir
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ninja
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ninja &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; builddir &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;creating-the-raspberry-pis-sysroot&quot;&gt;Creating the Raspberry Pi’s sysroot&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;In order to cross-compile the Raspberry Pi, you need to clone the target sysroot to the host.
For it, we are going to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt;, so the host and the target need to be connected through a network.&lt;/p&gt;

&lt;h2 id=&quot;on-the-raspberry-pi-4&quot;&gt;On the Raspberry Pi 4&lt;/h2&gt;

&lt;h3 id=&quot;1-update-the-system&quot;&gt;1. Update the system&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt dist-upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-enable-rsync-with-elevated-rights&quot;&gt;2. Enable rsync with elevated rights&lt;/h3&gt;

&lt;p&gt;As I said before, we will be using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt; command to sync files between the host and the Raspberry Pi.
For some of these files, root rights is required internally, so let’s enable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt; with elevated rights.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; ALL=NOPASSWD:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;which rsync&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--append&lt;/span&gt; /etc/sudoers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-setup-important-symlinks&quot;&gt;3. Setup important symlinks&lt;/h3&gt;

&lt;p&gt;Some symbolic links are needed to make the toolchain work properly, so to create all required symbolic link reliably, this bash script is needed.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://raw.githubusercontent.com/abhiTronix/raspberry-pi-cross-compilers/master/utils/SSymlinker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once it is downloaded, you just need to make it executable, and then run it for each path needed.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo chmod&lt;/span&gt; +x SSymlinker
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./SSymlinker &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/include/aarch64-linux-gnu/asm &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /usr/include
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./SSymlinker &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/include/aarch64-linux-gnu/gnu &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /usr/include
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./SSymlinker &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/include/aarch64-linux-gnu/bits &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /usr/include
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./SSymlinker &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/include/aarch64-linux-gnu/sys &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /usr/include
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./SSymlinker &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/include/aarch64-linux-gnu/openssl &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /usr/include
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./SSymlinker &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/lib/aarch64-linux-gnu/crtn.o &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /usr/lib/crtn.o
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./SSymlinker &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/lib/aarch64-linux-gnu/crt1.o &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /usr/lib/crt1.o
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./SSymlinker &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/lib/aarch64-linux-gnu/crti.o &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /usr/lib/crti.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;on-the-host-machine&quot;&gt;On the host machine&lt;/h2&gt;

&lt;h3 id=&quot;1-setting-up-the-directory-structure&quot;&gt;1. Setting up the directory structure&lt;/h3&gt;

&lt;p&gt;First, we need to create a workspace for building CTS, where the Raspberry Pi 4 sysroot is going to be built.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; ~/rpi-vk
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; ~/rpi-vk/installdir
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; ~/rpi-vk/tools
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; ~/rpi-vk/sysroot
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; ~/rpi-vk/sysroot/usr
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; ~/rpi-vk/sysroot/usr/share
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo chown&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; 1000:1000 ~/rpi-vk
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/rpi-vk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-sync-raspberry-pi-4-sysroot&quot;&gt;2. Sync Raspberry Pi 4 sysroot&lt;/h3&gt;

&lt;p&gt;Now, we need to sync up our sysroot folder with the system files from the Raspberry Pi.
We will be using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt; that let us sync files from the Raspberry Pi.
To do this, enter the following commands one by one into your terminal and remember to change username and 192.168.1.47 with the IP address of your Raspberry Pi.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rsync &lt;span class=&quot;nt&quot;&gt;-avz&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rsync-path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sudo rsync&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--delete&lt;/span&gt; pi@192.168.1.47:/lib sysroot
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rsync &lt;span class=&quot;nt&quot;&gt;-avz&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rsync-path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sudo rsync&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--delete&lt;/span&gt; pi@192.168.1.47:/usr/include sysroot/usr
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rsync &lt;span class=&quot;nt&quot;&gt;-avz&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rsync-path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sudo rsync&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--delete&lt;/span&gt; pi@192.168.1.47:/usr/lib sysroot/usr
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rsync &lt;span class=&quot;nt&quot;&gt;-avz&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rsync-path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sudo rsync&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--delete&lt;/span&gt; pi@192.168.1.47:/usr/share sysroot/usr
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rsync &lt;span class=&quot;nt&quot;&gt;-avz&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rsync-path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sudo rsync&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--delete&lt;/span&gt; pi@192.168.1.47:/home/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/mesa/installdir installdir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-fix-symbolic-links&quot;&gt;3. Fix symbolic links&lt;/h3&gt;

&lt;p&gt;The files we copied in the previous step still have symbolic links pointing to the file system on the Raspberry Pi.
So, we need to alter this, so that they become relative links from the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sysroot&lt;/code&gt; directory on the host machine.&lt;/p&gt;

&lt;p&gt;There is a Python script available online that can help us.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://raw.githubusercontent.com/abhiTronix/rpi_rootfs/master/scripts/sysroot-relativelinks.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once it is downloaded, you just need to make it executable and run it.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo chmod&lt;/span&gt; +x sysroot-relativelinks.py
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./sysroot-relativelinks.py sysroot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-installing-the-raspberry-pi-64-bit-cross-compiler-toolchain&quot;&gt;4. Installing the Raspberry Pi 64-Bit Cross-Compiler Toolchain&lt;/h3&gt;

&lt;p&gt;As Raspbian OS 64-bits uses GCC 10.2.0, let’s install the proper cross-compiler toolchain on our host machine.
I’m using the toolchain provided by &lt;a href=&quot;https://github.com/abhiTronix/raspberry-pi-cross-compilers&quot;&gt;abhiTronix/raspberry-pi-cross-compilers&lt;/a&gt;, but there are many other around the web that you can use.&lt;/p&gt;

&lt;p&gt;We are going to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tools&lt;/code&gt; folder to setup our toolchain.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/rpi-vk/tools
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://sourceforge.net/projects/raspberry-pi-cross-compilers/files/Bonus%20Raspberry%20Pi%20GCC%2064-Bit%20Toolchains/Raspberry%20Pi%20GCC%2064-Bit%20Cross-Compiler%20Toolchains/Bullseye/GCC%2010.2.0/cross-gcc-10.2.0-pi_64.tar.gz/download
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xvf download
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;download
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;5-setting-up-wayland&quot;&gt;5. Setting up Wayland&lt;/h3&gt;

&lt;p&gt;If you run all the steps from this tutorial expect this one, you will still get some weird Wayland-related errors when cross-compiling it.
This will happen because probably the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wayland-scanner&lt;/code&gt; version from your host is different from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wayland-scanner&lt;/code&gt; version of the target.
For example, on Fedora 37, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wayland-scanner&lt;/code&gt; version is 1.21.0 and the version on the Raspberry Pi 4 is 1.18.0.&lt;/p&gt;

&lt;p&gt;In order to build Wayland, you will need the following dependencies:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;dnf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;expat-devel xmlto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, let’s install the proper Wayland version on our sysroot.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://wayland.freedesktop.org/releases/wayland-1.18.0.tar.xz
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xvf wayland-1.18.0.tar.xz
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;wayland-1.18.0
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;meson &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt; ~/rpi-vk/sysroot/usr build
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ninja &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;lets-cross-compile-cts&quot;&gt;Let’s cross-compile CTS!&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;Now that we have the hole Raspberry Pi environment set up, we just need to create a toolchain file for CMake and its all set!
So, let’s clone the CTS repository.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/KhronosGroup/VK-GL-CTS
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;VK-GL-CTS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To build dEQP, you need first to download sources for zlib, libpng, jsoncpp, glslang, vulkan-docs, spirv-headers, and spirv-tools.
To download sources, run:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 external/fetch_sources.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Inside the CTS directory, we are going to create a toolchain file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cross_compiling.cmake&lt;/code&gt; with the following contents:&lt;/p&gt;

&lt;div class=&quot;language-cmake highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_VERBOSE_MAKEFILE ON&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_SYSTEM_NAME Linux&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_SYSTEM_VERSION 1&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_SYSTEM_PROCESSOR aarch64&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Check if the sysroot and toolchain paths are correct&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;tools /home/&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;/rpi-vk/tools/cross-pi-gcc-10.2.0-64&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;rootfs_dir $ENV{HOME}/rpi-vk/sysroot&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_FIND_ROOT_PATH &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rootfs_dir&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_SYSROOT &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rootfs_dir&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;ENV{PKG_CONFIG_PATH} &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;ENV{PKG_CONFIG_LIBDIR} &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMAKE_SYSROOT&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/usr/lib/pkgconfig:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMAKE_SYSROOT&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/usr/share/pkgconfig&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;ENV{PKG_CONFIG_SYSROOT_DIR} &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMAKE_SYSROOT&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_LIBRARY_ARCHITECTURE aarch64-linux-gnu&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_EXE_LINKER_FLAGS &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMAKE_EXE_LINKER_FLAGS&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -fPIC -Wl,-rpath-link,&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMAKE_SYSROOT&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/usr/lib/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMAKE_LIBRARY_ARCHITECTURE&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -L&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMAKE_SYSROOT&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/usr/lib/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMAKE_LIBRARY_ARCHITECTURE&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_C_FLAGS &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMAKE_CXX_FLAGS&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -fPIC -Wl,-rpath-link,&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMAKE_SYSROOT&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/usr/lib/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMAKE_LIBRARY_ARCHITECTURE&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -L&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMAKE_SYSROOT&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/usr/lib/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMAKE_LIBRARY_ARCHITECTURE&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_CXX_FLAGS &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMAKE_CXX_FLAGS&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -fPIC -Wl,-rpath-link,&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMAKE_SYSROOT&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/usr/lib/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMAKE_LIBRARY_ARCHITECTURE&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -L&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMAKE_SYSROOT&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/usr/lib/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMAKE_LIBRARY_ARCHITECTURE&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;WAYLAND_SCANNER &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMAKE_SYSROOT&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;/usr/bin/wayland-scanner&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;## Compiler Binary&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;BIN_PREFIX &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;/bin/aarch64-linux-gnu&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_C_COMPILER &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BIN_PREFIX&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;-gcc&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_CXX_COMPILER &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BIN_PREFIX&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;-g++ &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_LINKER &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BIN_PREFIX&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;-ld
            CACHE STRING &lt;span class=&quot;s2&quot;&gt;&quot;Set the cross-compiler tool LD&quot;&lt;/span&gt; FORCE&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_AR &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BIN_PREFIX&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;-ar
            CACHE STRING &lt;span class=&quot;s2&quot;&gt;&quot;Set the cross-compiler tool AR&quot;&lt;/span&gt; FORCE&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_NM {BIN_PREFIX}-nm
            CACHE STRING &lt;span class=&quot;s2&quot;&gt;&quot;Set the cross-compiler tool NM&quot;&lt;/span&gt; FORCE&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_OBJCOPY &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BIN_PREFIX&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;-objcopy
            CACHE STRING &lt;span class=&quot;s2&quot;&gt;&quot;Set the cross-compiler tool OBJCOPY&quot;&lt;/span&gt; FORCE&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_OBJDUMP &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BIN_PREFIX&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;-objdump
            CACHE STRING &lt;span class=&quot;s2&quot;&gt;&quot;Set the cross-compiler tool OBJDUMP&quot;&lt;/span&gt; FORCE&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_RANLIB &lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BIN_PREFIX&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;-ranlib
            CACHE STRING &lt;span class=&quot;s2&quot;&gt;&quot;Set the cross-compiler tool RANLIB&quot;&lt;/span&gt; FORCE&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_STRIP {BIN_PREFIX}-strip
            CACHE STRING &lt;span class=&quot;s2&quot;&gt;&quot;Set the cross-compiler tool RANLIB&quot;&lt;/span&gt; FORCE&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that we had to specify our toolchain and also the specify the path to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wayland-scanner&lt;/code&gt;.
Now that we are all set, we can finally cross-compile CTS.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;build
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;build
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cmake &lt;span class=&quot;nt&quot;&gt;-DCMAKE_BUILD_TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Debug &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-DCMAKE_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/rpi-vk/installdir/lib &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-DCMAKE_INCLUDE_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/rpi-vk/installdir/include &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-DCMAKE_GENERATOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Ninja &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-DCMAKE_TOOLCHAIN_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/VK-GL-CTS/cross_compiling.cmake ..
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ninja
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, you can transfer the compiled files to the Raspberry Pi 4 and run CTS!&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;This was a fun little challenge of my CE project and it was pretty nice to learn more about CTS.
Running CTS was also a great idea from Melissa as I was able to hexdump the contents of a noop job for the V3DV and fix my noop job on IGT.
So, now I finally have a working noop job on IGT and you can check it &lt;a href=&quot;https://patchwork.freedesktop.org/series/112363/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, a huge thanks to my friend &lt;a href=&quot;https://grillo-0.github.io/blog/&quot;&gt;Arthur Grillo&lt;/a&gt; for helping me with resources about cross-compiling for the Raspberry Pi.&lt;/p&gt;
</description>
                <pubDate>Tue, 16 May 2023 12:00:00 +0000</pubDate>
                <link>https://mairacanal.github.io/cross-compiling-cts-rpi4/</link>
                <guid isPermaLink="true">https://mairacanal.github.io/cross-compiling-cts-rpi4/</guid>
            </item>
        
            <item>
                <title>Rotating Planes on VKMS</title>
                
                <description>&lt;p&gt;In my last blog post, I described a bit of my previous work on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rustgem&lt;/code&gt; project, and after that, as I had finished the VGEM features, I sent a &lt;a href=&quot;https://lore.kernel.org/dri-devel/20230317121213.93991-1-mcanal@igalia.com/T/&quot;&gt;RFC&lt;/a&gt; to the mailing list.
Although I still need to work on some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rustgem&lt;/code&gt; feedback, I started to explore more of the KMS (Kernel Mode Setting) and its properties.&lt;/p&gt;

&lt;p&gt;I talked to my mentor &lt;a href=&quot;https://melissawen.github.io/&quot;&gt;Melissa Wen&lt;/a&gt;, one of the VKMS maintainers, and she proposed implementing plane rotation capabilities to VKMS.
The VKMS (Virtual Kernel Mode Setting) is a software-only KMS driver that is quite useful for testing and running X (or similar compositors) on headless machines.
It sounded like a great idea, as I would like to explore a bit more of the KMS side of things.&lt;/p&gt;

&lt;h1 id=&quot;what-is-plane-rotation&quot;&gt;What is Plane Rotation?&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;In order to have an image on a display, we need to go through the whole Kernel Mode Setting (KMS) Display Pipeline.
The pipeline has a couple of different objects, such as framebuffers, planes, and CRTCs, and the relationship between them can be quite complicated.
If you are interested in the KMS Display Pipeline, I recommend reading the great &lt;a href=&quot;https://docs.kernel.org/gpu/drm-kms.html&quot;&gt;KMS documentation&lt;/a&gt;.
But here we are focused in only one of those abstractions, the plane.&lt;/p&gt;

&lt;p&gt;In the context of graphics processing, a plane refers to an image source that can be superimposed or blended on top of a CRTC during the scanout process.
The plane itself specifies the cropping and scaling of that image, and where it is placed on the visible area of the CRTC.
Moreover, planes may possess additional attributes that dictate pixel positioning and blending, such as rotation or Z-positioning.&lt;/p&gt;

&lt;p&gt;Rotation is an optional KMS property of the DRM plane object, which we use to specify the rotation amount in degrees in counter-clockwise direction.
The rotation is applied to the image sampled from the source rectangle, before scaling it to fit in the destination rectangle.
So, basically, the rotation property adds a rotation and a reflection step between the source and destination rectangles.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;		|*********|$$$$$$$$$|              |$$$$$$$$$|@@@@@@@@@|
		|*********|$$$$$$$$$|  ---------&amp;gt;  |$$$$$$$$$|@@@@@@@@@|
		|#########|@@@@@@@@@|     90º      |*********|#########|
		|#########|@@@@@@@@@|              |*********|#########|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The possible rotation values are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rotate-0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rotate-90&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rotate-180&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rotate-270&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reflect-x&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reflect-y&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we understand what plane rotation is, we can think about how to implement the rotation property on VKMS.&lt;/p&gt;

&lt;h1 id=&quot;rotation-on-vkms&quot;&gt;Rotation on VKMS&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;VKMS has some really special driver attributes, as all its composition happens by software operations.
The rotation is usually an operation that is performed on the user-space, but the hardware can also perform it.
In order for the hardware to perform it, the driver will set some registers, change some configurations, and indicate to the hardware that the plane should be rotated.
This doesn’t happen on VKMS, as the composition is essentially a software loop.
So, we need to modify this loop to perform the rotation.&lt;/p&gt;

&lt;p&gt;First, we need a brief notion of how the composition happens in VKMS.
The composition in VKMS happens line-by-line.
Each line is represented by a staging buffer, which contains the composition for one plane, and an output buffer, which contains the composition of all planes in z-pos order.
For each line, we query an array by the first pixel of the line and go through the whole source array linearly, performing the proper pixel conversion.
The composition of the line can be summarized by:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vkms_compose_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line_buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stage_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vkms_plane_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixel_argb_u16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out_pixels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stage_buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vkms_frame_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plane&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;u8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src_pixels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_packed_src_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drm_rect_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stage_buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_pixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src_pixels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;plane&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixel_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src_pixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out_pixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we can see that we have the line, represented by the stage buffer and the y coordinate, and the source pixels.
We read each source pixel in a linear manner, through the for-loop, and we place it on the stage buffer in the appropriate format.&lt;/p&gt;

&lt;p&gt;With that in mind, we can think that rotating a plane is a matter of changing how we read and interpret the lines.
Let’s think about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reflect-x&lt;/code&gt; operation.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;		|*********|$$$$$$$$$|                |$$$$$$$$$|*********|
		|*********|$$$$$$$$$|  -----------&amp;gt;  |$$$$$$$$$|*********|
		|#########|@@@@@@@@@|   reflect-x    |@@@@@@@@@|#########|
		|#########|@@@@@@@@@|                |@@@@@@@@@|#########|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thinking that the VKMS composition happens line-by-line, we can describe the operation as a read in reverse order.
So, instead of start reading the pixels from left to right, we need to start reading the pixels from right to left.
We can implement this by getting the limit of the line and subtracting the current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; position:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_x_position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vkms_frame_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DRM_MODE_REFLECT_X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reflect-y&lt;/code&gt; operation, we need to start reading the plane from the last line, instead of reading it from the first line.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;		|*********|$$$$$$$$$|                |#########|@@@@@@@@@|
		|*********|$$$$$$$$$|  -----------&amp;gt;  |#########|@@@@@@@@@|
		|#########|@@@@@@@@@|   reflect-y    |*********|$$$$$$$$$|
		|#########|@@@@@@@@@|                |*********|$$$$$$$$$|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This can be performed by changing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; on the external composition loop.
Similarly from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reflect-x&lt;/code&gt; case, we can get the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; limit and subtract the current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; position.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_y_pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vkms_frame_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DRM_MODE_REFLECT_Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drm_rect_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rotated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, to implement the rotation in VKMS, we need to change how we interpret the boundaries of the plane and read accordingly.&lt;/p&gt;

&lt;p&gt;This might seem odd because we could just rotate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; rectangle by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drm_rect_rotate&lt;/code&gt;, but this wouldn’t work as the composition in VKMS is performed line-by-line and the pixels are accessed linearly.
However, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drm_rect_rotate&lt;/code&gt; is of great help for us on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rotate-90&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rotate-270&lt;/code&gt; cases.
Those cases demand scaling and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drm_rect_rotate&lt;/code&gt; helps us tremendously with it.
Basically, what it does is:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;		                                              |$$|@@|
		                                              |$$|@@|
		|*********|$$$$$$$$$|                         |$$|@@|
		|*********|$$$$$$$$$|  --------------------&amp;gt;  |$$|@@|
		|#########|@@@@@@@@@|   drm_rect_rotate(90)   |**|##|
		|#########|@@@@@@@@@|                         |**|##|
		                                              |**|##|
		                                              |**|##|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drm_rect_rotate&lt;/code&gt; operation, we need to read the columns as lines and the lines as columns.
See that even for a case like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rotate-90&lt;/code&gt;, it is just a matter of changing the point of view and reading the lines differently.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;The complete implementation of all rotation modes is available &lt;a href=&quot;https://patchwork.freedesktop.org/series/116189/&quot;&gt;here&lt;/a&gt;.
Together with the rotation feature, I sent a patch to reduce the code repetition in the code by isolating the pixel conversion functionality.
This patch was already merged, but the rest of the series is still pending a Reviewed-by.&lt;/p&gt;

&lt;p&gt;Rotating planes on VKMS was a fun challenge of my &lt;a href=&quot;https://www.igalia.com/coding-experience/&quot;&gt;Igalia Coding Experience&lt;/a&gt; and I hope to keep working on VKMS to bring more and more features.&lt;/p&gt;
</description>
                <pubDate>Mon, 08 May 2023 00:00:00 +0000</pubDate>
                <link>https://mairacanal.github.io/rotating-planes-vkms/</link>
                <guid isPermaLink="true">https://mairacanal.github.io/rotating-planes-vkms/</guid>
            </item>
        
            <item>
                <title>Adding a Timeout feature to Rustgem</title>
                
                <description>&lt;p&gt;After my last blogpost, I kept developing the Rust version of the VGEM driver,
also known as rustgem for now. Previously, I had developed two important
features of the driver: the ability to attach a fence and the ability to signal
a fence. Still one important feature is still missing: the ability to prevent
hangs. Currently, if the fence is not signaled, the driver will simply hang. So,
we can create a callback that signals the fence when the fence is not signaled
by the user for more than 10 seconds.&lt;/p&gt;

&lt;p&gt;In order to create this callback, we need to have a Timer that will trigger it
after the specified amount of time.  Gladly, the Linux kernel provides us with a
Timer that can be set with a callback and a timeout. But, to use it in the Rust
code, we need to have a safe abstraction, that will ensure that the code is safe
under some assumptions.&lt;/p&gt;

&lt;h1 id=&quot;first-attempt-writing-a-timer-abstraction&quot;&gt;First Attempt: writing a Timer abstraction&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;Initially, I was developing an abstraction on my own as I checked the RfL
tree and there were no Timer abstractions available.&lt;/p&gt;

&lt;p&gt;The most important question here is “how can we guarantee access to other
objects inside the callback?”. The callback only has receives a pointer to the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct timer_list&lt;/code&gt; as its single argument. Naturally, we can think about using
a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;container_of&lt;/code&gt; macro. In order to make the compatibility layer between
Rust and the C callback, I decided to store the object inside the Timer. Yep, I
didn’t like that a lot, but it was the solution I came up with at the time. The
struct looked something like this:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cd&quot;&gt;/// A driver-specific Timer Object&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// # Invariants&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// timer is a valid pointer to a struct timer_list and we own a reference to it.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;repr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UniqueTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimerOps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;bindings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;_p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PhantomData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Moreover, the second important question I had was “how can the user pass a
callback function to the timer?”. There were two possibilities: using a closure
and using a Trait. I decided to go through the trait path. Things would be kind
of similar if I decided to go into the closure path.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cd&quot;&gt;/// Trait which must be implemented by driver-specific timer objects.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimerOps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Sized&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cd&quot;&gt;/// Type of the Inner data inside the Timer&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cd&quot;&gt;/// Timer callback&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timer_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UniqueTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With those two questions solved, it seems that we are all set and good to go.
So, we can create methods to initialize the timer and modify the timer’s
timeout, implement the Drop trait, and use the following callback by default:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer_callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimerOps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Sized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bindings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;crate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;container_of!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UniqueTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			    &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UniqueTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// SAFETY: The caller is responsible for passing a valid timer_list subtype&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;timer_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All should work, right? Well… No, I didn’t really mention how I was allocating
memory. And let’s say I was initially allocating it wrongly and therefore, the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;container_of&lt;/code&gt; macro was pointing to the wrong memory space.&lt;/p&gt;

&lt;p&gt;Initially, I was allocating only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timer&lt;/code&gt; with the kernel memory allocator
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;krealloc&lt;/code&gt; and allocating the rest of the struct with Rust’s memory allocator.
By making such a mess, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;container_of&lt;/code&gt; wasn’t able to point to the right
memory address.&lt;/p&gt;

&lt;p&gt;I had to change things a bit to allocate the whole struct &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UniqueTimer&lt;/code&gt; with
the kernel’s memory allocator. However, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;krealloc&lt;/code&gt; returns a raw pointer and it
would be nice for the final user to get a raw pointer to the object. I wrapped
up inside another struct that could be dereferenced into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UniqueTimer&lt;/code&gt;
object.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cd&quot;&gt;/// A generic Timer Object&lt;/span&gt;
&lt;span class=&quot;cd&quot;&gt;///&lt;/span&gt;
&lt;span class=&quot;cd&quot;&gt;/// This object should be instantiated by the end user, as it holds&lt;/span&gt;
&lt;span class=&quot;cd&quot;&gt;/// a unique reference to the UniqueTimer struct. The UniqueTimer&lt;/span&gt;
&lt;span class=&quot;cd&quot;&gt;/// methods can be used through it.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimerOps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UniqueTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimerOps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cd&quot;&gt;/// Create a timer for its first use&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;bindings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;krealloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;nn&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;null_mut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;nn&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;size_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UniqueTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;nn&quot;&gt;bindings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GFP_KERNEL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bindings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__GFP_ZERO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UniqueTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// SAFETY: The pointer is valid, so pointers to members are too.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// After this, all fields are initialized.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;addr_of_mut!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;bindings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;timer_setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;addr_of_mut!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;timer_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;container_of&lt;/code&gt; macro started working! Now, I could setup a Timer
for each fence and keep the fence inside the timer. Finally, I could use the
fence inside the timer to signal it when it was not signaled by the user for
more than 10 seconds.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimerOps&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VgemFenceOps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UniqueFence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timer_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UniqueTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UniqueFence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, I tested the driver with IGT using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vgem_slow&lt;/code&gt; test and it was now
passing! All IGT tests were passing and it looked like the driver was
practically completed (some FIXME problems notwithstanding). But, let’s see if
this abstraction is really safe…&lt;/p&gt;

&lt;h1 id=&quot;second-attempt-using-a-timer-abstraction&quot;&gt;Second Attempt: using a Timer abstraction&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;First, let’s inspect the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct timer_list&lt;/code&gt; in the C code.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer_list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hlist_node&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;expires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By looking at this struct, we can see a problem in my abstraction: a timer
can point to a timer through a list. If you are not familiar with Rust, this can
seem normal, but self-referential types can lead to undefined behavior (UB).&lt;/p&gt;

&lt;p&gt;Let’s say we have an example type with two fields: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u32&lt;/code&gt; and a pointer to this
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u32&lt;/code&gt; value. Initially, everything looks fine, the pointer field points to the
value field in memory address A, which contains a valid &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u32&lt;/code&gt;, and all pointers
are &lt;strong&gt;valid&lt;/strong&gt;. But Rust has the freedom to move values around memory. For
example, if we pass this struct into another function, it might get moved to a
different memory address. So, the once valid pointer is no longer valid, because
when we move the struct, the struct’s fields change their address, but not their
value. Now, the pointer fields still point to the memory address A, although the
value field is located at the memory address B now. This is really bad and can
lead to UB.&lt;/p&gt;

&lt;p&gt;The solution is to make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timer_list&lt;/code&gt; implement the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!Unpin&lt;/code&gt; trait. This means
that to use this type safely, we can’t use regular pointers for self-reference.
Instead, we use special pointers that “pin” their values into place, ensuring
they can’t be moved.&lt;/p&gt;

&lt;p&gt;Still looking at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct timer_list&lt;/code&gt;, it is possible to notice that a timer
can queue itself in the timer function. This functionality is not covered by my
current abstraction.&lt;/p&gt;

&lt;p&gt;Moreover, I was using jiffies to modify the timeout duration and I was adding a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Duration&lt;/code&gt; to the jiffies. This is problematic, because it can cause a data
races. Reading jiffies and adding a duration to them should be an atomic
operation.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Huge thanks to the RfL folks that pointed the errors in my implementation!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With all these problems pointed out, it is time to fix them! I could have
reimplemented my safe abstraction, but the RfL folks pointed me to a Timer
abstraction that they are developing in a &lt;a href=&quot;https://github.com/fbq/linux-rust/commits/rust-dev&quot;&gt;downstream
tree&lt;/a&gt;. Therefore, I decided
to use their Timer abstraction.&lt;/p&gt;

&lt;p&gt;There were two options to implement a Timer abstraction:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;To implement the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Timeout&lt;/code&gt; trait to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VgemFence&lt;/code&gt; struct&lt;/li&gt;
  &lt;li&gt;To use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FnTimer&lt;/code&gt; abstraction&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the end, I decided to go with the second approach. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FnTimer&lt;/code&gt; receives a
closure that will be executed at the timeout. The closure can return an enum that
indicated if the timer is done or if it should be rescheduled.&lt;/p&gt;

&lt;p&gt;When implementing the timer, I had &lt;strong&gt;a lot&lt;/strong&gt; of borrow checker problems.  See…
I need to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fence&lt;/code&gt; object inside the callback and also move the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fence&lt;/code&gt;
object at the end of the function. So, I got plenty of “cannot move out of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fence&lt;/code&gt; because it is borrowed” errors. Also, I needed the Timer to be dropped
at the same time as the fence, so I needed to store the Timer inside the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VgemFence&lt;/code&gt; struct.&lt;/p&gt;

&lt;p&gt;The solution to the problems: smart pointers! I boxed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FnTimer&lt;/code&gt; and the closure
inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FnTimer&lt;/code&gt; so that I could store it inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VgemFence&lt;/code&gt; struct.
Then, the second problem got fixed. But, I still cannot use the fence inside the
closure, because it wasn’t encapsulated inside a smart pointer. So, I used an
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arc&lt;/code&gt; to box &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fence&lt;/code&gt;, clone it, and move it to the scope of the closure.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;crate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VgemFence&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UniqueFence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FnTimer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;dyn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FnMut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Sync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VgemFence&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;crate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fence_ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;FenceContexts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUEUE_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QUEUE_CLASS_KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;try_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fence_ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.new_fence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fence&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// SAFETY: The caller calls [`FnTimer::init_timer`] before using the timer.&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;try_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nn&quot;&gt;FnTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;try_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fence&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fence&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
					&lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// SAFETY: As FnTimer is inside a Box, it won&apos;t be moved.&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Pin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new_unchecked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

		&lt;span class=&quot;nd&quot;&gt;timer_init!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;vgem_timer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// SAFETY: Duration.as_millis() returns a valid total number of whole milliseconds.&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bindings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;msecs_to_jiffies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_secs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_millis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.try_into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// We force the fence to expire within 10s to prevent driver hangs&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.raw_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.schedule_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;jiffies_later&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

		&lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can observe in this code that the initialization of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FnTimer&lt;/code&gt; uses an
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unsafe&lt;/code&gt; operation. This happens because we still don’t have &lt;a href=&quot;https://y86-dev.github.io/blog/safe-pinned-initialization/overview.html&quot;&gt;Safe Pinned
Initialization&lt;/a&gt;.
But the RfL folks are working hard to land this feature and improve ergonomics
when using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, running again the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vgem_slow&lt;/code&gt; IGT test, you can see that all IGT tests are
now passing!&lt;/p&gt;

&lt;h1 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;During this time, many improvements landed in the driver: all the objects are
being properly dropped, including the DRM device; all error cases are returning
the correct error; the SAFETY comments are properly written and most importantly,
the timeout feature was introduced. With that, all IGT tests are passing and the
driver is functional!&lt;/p&gt;

&lt;p&gt;Now, the driver is in a good shape, apart from one FIXME problem: currently, the
IOCTL abstraction doesn’t support any drivers that the IOCTLs don’t start in
0x00 and the VGEM driver starts its IOCTLs with 0x01. I don’t know yet how to
bypass this problem without adding a dummy IOCTL as 0x00, but I hope to get a
solution to it soon.&lt;/p&gt;

&lt;p&gt;The progress of this project can be followed in this
&lt;a href=&quot;https://github.com/mairacanal/linux/pull/11&quot;&gt;PR&lt;/a&gt; and I hope to see this project
being integrated upstream in the future.&lt;/p&gt;
</description>
                <pubDate>Wed, 22 Mar 2023 00:00:00 +0000</pubDate>
                <link>https://mairacanal.github.io/adding-timeout-rustgem/</link>
                <guid isPermaLink="true">https://mairacanal.github.io/adding-timeout-rustgem/</guid>
            </item>
        
            <item>
                <title>Rust for VGEM</title>
                
                <description>&lt;p&gt;In the last blog post, I pointed out that I didn’t know exactly what it would be
my next steps for the near future. Gladly, I had the amazing opportunity to
start a new &lt;a href=&quot;https://www.igalia.com/coding-experience/&quot;&gt;Igalia Coding
Experience&lt;/a&gt; with a new project.&lt;/p&gt;

&lt;p&gt;This time &lt;a href=&quot;https://melissawen.github.io/&quot;&gt;Melissa Wen&lt;/a&gt; pitched me with the idea
to play around with Rust for Linux in order to rewrite the VGEM driver in Rust.
The Rust for Linux project is growing fast with new bindings and abstractions
being introduced in the downstream RfL kernel. Also, some basic functionalities
were introduced in Linux 6.1. Therefore, it seems like a great timing to start
exploring Rust in the DRM subsystem!&lt;/p&gt;

&lt;h1 id=&quot;why-rust&quot;&gt;Why Rust?&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;As mentioned by the Rust website, using Rust means &lt;strong&gt;Performance&lt;/strong&gt;,
&lt;strong&gt;Reliability&lt;/strong&gt;, and &lt;strong&gt;Productivity&lt;/strong&gt;. Rust is a blazingly fast and
memory-efficient language with its powerful &lt;strong&gt;ownership model&lt;/strong&gt;. No more looking
for use-after-free and memory leaks, as Rust guarantees memory safety and thread
safety, eliminating a handful of bugs at compile-time.&lt;/p&gt;

&lt;p&gt;Moreover, Rust provides a new way of programming. The language provides
beautiful features such as traits, enums, and error handling, that can
make us feel empowered by the language. We can use a lot of concepts from
functional programming and mix them with concepts from OOP, for example.&lt;/p&gt;

&lt;p&gt;Although I’m an absolute beginner in Rust, I can see the major advantages of the
Rust programming language. From the start, it was a bit tough to enjoy the
language, as I was fighting with the compiler most of the time. But now that I
have a more firm foundation on Rust, it is possible to appreciate the beauty in
Rust and I don’t see myself starting a new project in C++ for a long while.&lt;/p&gt;

&lt;p&gt;Bringing Rust to the Linux Kernel is a ambitious idea, but it can lead to
great changes. We can think about a world where no developers are looking for
memory leaks and use-after-free bugs due to the safety that Rust can provide us.&lt;/p&gt;

&lt;h1 id=&quot;rust-on-drm&quot;&gt;Rust on DRM&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;Now, what about Rust for DRM? I mean, I’m not the first one to think about it.
&lt;a href=&quot;https://twitter.com/LinaAsahi&quot;&gt;Asahi Lina&lt;/a&gt; is making a fantastic work on the
Apple M1 GPU and things are moving quite fast there. She already had great safe
abstractions for the DRM bindings and provides us the very basis for anyone who
is willing to start a new DRM driver in Rust, which is my case.&lt;/p&gt;

&lt;p&gt;That said, why not make use of Lina’s excellent bindings to build a new driver?&lt;/p&gt;

&lt;h1 id=&quot;rust-for-vgem&quot;&gt;Rust for VGEM&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;VGEM (Virtual GEM Provider) is a minimal non-hardware backed GEM (Graphics
Execution Manager) service. It is used with non-native 3D hardware for buffer
sharing between the X server and DRI. It is a fairly simple driver with about
400 lines of code and it uses the DMA Fence API to handle attaching and
signaling the fences.&lt;/p&gt;

&lt;p&gt;So, to rewrite VGEM in Rust, some bindings are needed, e.g. bindings for
platform device, for XArray, and for dealing with DMA fence and DMA
reservations. Furthermore, many DRM abstractions are needed as well.&lt;/p&gt;

&lt;p&gt;In this sense, a lot of the DRM abstractions are already developed by Lina and
also she is developing abstractions for DMA fence. So, in this project, I’ll be
focusing on the bindings that Lina and the RfL folks haven’t developed yet.&lt;/p&gt;

&lt;p&gt;After developing the bindings, it is a matter of developing the driver, which
it’ll be quite simple after all DMA abstractions are set, because most of the
driver consists of fence manipulation.&lt;/p&gt;

&lt;h1 id=&quot;current-status&quot;&gt;Current Status&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;I have developed the main platform device registration of the driver. As VGEM is
a virtual device, the standard probe initialization is not useful, as a virtual
device cannot be probed by the pseudo-bus that holds the platform devices. So,
as VGEM is not a usual hotplugged device, we need to use the legacy platform
device initialization. This made me develop my first binding for legacy
registration:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/// Add a platform-level device and its resources
pub fn register(name: &amp;amp;&apos;static CStr, id: i32) -&amp;gt; Result&amp;lt;Self&amp;gt; {
	let pdev = from_kernel_err_ptr(unsafe {
		bindings::platform_device_register_simple(name.as_char_ptr(), id,
			core::ptr::null(), 0)
	})?;

	Ok(Self {
		ptr: pdev,
		used_resource: 0,
		is_registered: true,
	})
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For sure, the registration must follow the unregistration of the device, so I
implemented a Drop trait for the struct Device in order to guarantee the proper
device removal without explicitly calling it.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;impl Drop for Device {
	fn drop(&amp;amp;mut self) {
		if self.is_registered {
			// SAFETY: This path only runs if a previous call to `register`
			// completed successfully.
			unsafe { bindings::platform_device_unregister(self.ptr) };
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After those, I also developed bindings for a couple of more functions and
together with Lina’s bindings, I could initialize the platform device and
register the DRM device under a DRM minor!&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[   38.825684] vgem: vgem_init: platform_device with id -1
[   38.826505] [drm] Initialized vgem 1.0.0 20230201 for vgem on minor 0
[   38.858230] vgem: Opening...
[   38.862377] vgem: Closing...
[   41.543416] vgem: vgem_exit: drop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, I focused on the development of the two IOCTLs: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drm_vgem_fence_attach&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drm_vgem_fence_signal&lt;/code&gt;. The first is responsable for creating and attaching
a fence to the VGEM handle, while the second signals and consumes a fence
earlier attached to a VGEM handle.&lt;/p&gt;

&lt;p&gt;In order to add a fence, bindings to DMA reservation are needed. So, I started
by creating a safe abstraction for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct dma_resv&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/// A generic DMA Resv Object
///
/// # Invariants
/// ptr is a valid pointer to a dma_resv and we own a reference to it.
pub struct DmaResv {
    ptr: *mut bindings::dma_resv,
}

impl DmaResv {
	
    [...]
	
    /// Add a fence to the dma_resv object
    pub fn add_fences(
        &amp;amp;self,
        fence: &amp;amp;dyn RawDmaFence,
        num_fences: u32,
        usage: bindings::dma_resv_usage,
    ) -&amp;gt; Result {
        unsafe { bindings::dma_resv_lock(self.ptr, core::ptr::null_mut()) };

        let ret = self.reserve_fences(num_fences);
        match ret {
            Ok(_) =&amp;gt; {
                // SAFETY: ptr is locked with dma_resv_lock(), and dma_resv_reserve_fences()
                // has been called.
                unsafe {
                    bindings::dma_resv_add_fence(self.ptr, fence.raw(), usage);
                }
            }
            Err(_) =&amp;gt; {}
        }
        
        unsafe { bindings::dma_resv_unlock(self.ptr) };

        ret
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With that step, I could simply write the IOCTLs based on the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DmaResv&lt;/code&gt;
abstraction and Lina’s fence abstractions.&lt;/p&gt;

&lt;p&gt;To test the IOCTLs, I used some already available IGT tests: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dmabuf_sync_file&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vgem_basic&lt;/code&gt;. Those tests use VGEM as it base, so if the tests pass, it
means that the IOCTLs are working properly. And, after some debugging and rework
in the IOCTLs, I managed to get most of the tests to pass!&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@fedora igt-gpu-tools]# ./build/tests/dmabuf_sync_file
IGT-Version: 1.27-gaa16e812 (x86_64) (Linux: 6.2.0-rc3-asahi-02441-g6c8eda039cfb-dirty x86_64)
Starting subtest: export-basic
Subtest export-basic: SUCCESS (0.000s)
Starting subtest: export-before-signal
Subtest export-before-signal: SUCCESS (0.000s)
Starting subtest: export-multiwait
Subtest export-multiwait: SUCCESS (0.000s)
Starting subtest: export-wait-after-attach
Subtest export-wait-after-attach: SUCCESS (0.000s)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can check out the current progress of this project on this
&lt;a href=&quot;https://github.com/mairacanal/linux/pull/11&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;Although most of the IGT tests are now passing, two tests aren’t working yet:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vgem_slow&lt;/code&gt;, as I haven’t introduced the timeout yet, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vgem_basic@unload&lt;/code&gt;,
as I still need to debug why the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Drop&lt;/code&gt; trait from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drm::drv::Registration&lt;/code&gt; is
not being called.&lt;/p&gt;

&lt;p&gt;After bypassing those two problems, I still need to rework some of my code, as,
for example, I’m using a dummy IOCTL as IOCTL number 0x00, as the current macro
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kernel::declare_drm_ioctl&lt;/code&gt; doesn’t support any drivers for which the IOCTL doesn’t
start in 0x00.&lt;/p&gt;

&lt;p&gt;So, there is a lot of work yet to be done!&lt;/p&gt;
</description>
                <pubDate>Tue, 28 Feb 2023 00:00:00 +0000</pubDate>
                <link>https://mairacanal.github.io/rust-for-vgem/</link>
                <guid isPermaLink="true">https://mairacanal.github.io/rust-for-vgem/</guid>
            </item>
        
            <item>
                <title>January Update: Finishing my Igalia CE</title>
                
                <description>&lt;p&gt;2022 really passed by fast and after I completed the GSoC 2022, I’m now
completing another milestone: my project in the &lt;a href=&quot;https://www.igalia.com/coding-experience/&quot;&gt;Igalia Coding
Experience&lt;/a&gt; and I
had the best experience during those four months. I learned tremendously about
the Linux graphics stack and now I can say for sure that I would love to keep
working in the DRM community.&lt;/p&gt;

&lt;p&gt;While GSoC was, for me, an experience to get a better understanding of what open
source is, Igalia CE was an opportunity for me to mature my knowledge of
technical concepts.&lt;/p&gt;

&lt;p&gt;So, this is a summary report of my journey at the Igalia CE.&lt;/p&gt;

&lt;h1 id=&quot;igt-tests-to-v3d&quot;&gt;&lt;a href=&quot;https://gitlab.freedesktop.org/drm/igt-gpu-tools&quot;&gt;IGT&lt;/a&gt; tests to V3D&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;Initially, V3D only had three basic IGT tests: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_get_bo_offset&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_get_param&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_mmap&lt;/code&gt;. So, the basic goal of my CE project was to add
more tests to the V3D driver.&lt;/p&gt;

&lt;p&gt;V3D is the driver that supports the Broadcom V3D 3.3 and 4.1 OpenGL ES GPUs, and
is the driver that provides 3D rendering to the Raspberry Pi 4. V3D is composed
of a tiled renderer, a TFU (Texture Formatting Unit), and a CSD (Compute Shader
Dispatch).&lt;/p&gt;

&lt;p&gt;During the CE, I was able to develop tests for almost all eleven V3D ioctls
(except &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_submit_tfu&lt;/code&gt;). I began writing tests to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_create_bo&lt;/code&gt; ioctl
and &lt;em&gt;Performance Monitor&lt;/em&gt; (perfmon) related ioctls. I developed tests that check
the basic functionality of the ioctls and I inspected the kernel code to
understand situations where the ioctl should fail.&lt;/p&gt;

&lt;p&gt;After those tests, I got the biggest challenge that I had on my CE project:
performing a Mesa’s no-op job on IGT. A no-op job is one of the simplest jobs
that can be submitted to the V3D. It is a 3D rendering job, so it is a job
submitted through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_submit_cl&lt;/code&gt; ioctl, and performing this job on IGT was
fundamental to developing good tests for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_submit_cl&lt;/code&gt; ioctl.&lt;/p&gt;

&lt;p&gt;The main problem I faced on submitting a no-op job on IGT was: I would copy many
and many Mesa files to IGT. And I took a while fighting against this idea,
looking for other ways to submit a job to V3D. But, as some experience developers
pointed out, packeting is the best option for it. So indeed, the final solution
I came in with was to copy a couple of files from Mesa, but just three of them,
which sounds reasonable.&lt;/p&gt;

&lt;p&gt;So, after some time, I was able to bring the Mesa structure to IGT with minimal
overhead. But, I was still not able to run a successful no-op job as the job’s
fence wasn’t being signaled by the end of the job. Then, Melissa Wen guided me
to experiment running CTS tests to inspect the no-op job. With the CTS tests, I
was able to hexdump the contents of the packet and understand what was going on
wrong in my no-op job.&lt;/p&gt;

&lt;p&gt;Running the CTS in the Raspberry Pi 4 was a fun side-quest of the project and
ended up resulting in a commit to the CTS repository, as CTS wasn’t handling
appropriately the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wayland-scanner&lt;/code&gt; for cross-compiling. CTS was picking the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wayland-scanner&lt;/code&gt; from the host computer instead of picking the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wayland-scanner&lt;/code&gt; executable available in the target sysroot. This was fixed
with this simple patch:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/KhronosGroup/VK-GL-CTS/commit/6dfa0b69b46e69bdabd213ec2cf915bcd6e689f3&quot;&gt;&lt;strong&gt;Allow override of wayland_scanner executable&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I finally got a successful no-op job, I was able to write the tests for the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_submit_cl&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_wait_bo&lt;/code&gt; ioctls. On these tests, I tested primarily job
synchronization with single syncobjs and multiple syncobjs. In this part of the
project, I had the opportunity to learn a lot about syncobjs and different forms
of synchronization in the kernel and userspace.&lt;/p&gt;

&lt;p&gt;Having done the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_submit_cl&lt;/code&gt; tests, I developed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_submit_csd&lt;/code&gt; tests in
a similar way, as the job submission process is kind of similar. For submitting
a CSD job, it is necessary to make a valid submission with a pipeline assembly
shader and as IGT doesn’t have a shader compiler, so I hard-coded the assembly
of an empty shader in the code. In this way, I was able to get a simple CSD job
submitted, and having done that, I could now play around with mixing CSD and CL
jobs.&lt;/p&gt;

&lt;p&gt;In these tests, I could test the synchronization between two job queues and see,
for example, if they were proceeding independently.&lt;/p&gt;

&lt;p&gt;So, by the end of the review process, I will add 66 new sub-tests to V3D, having
in total 72 IGT sub-tests! Those tests are checking invalid parameters,
synchronization, and the proper behavior of the functionalities.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Patch/Series&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Status&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/series/110681/&quot;&gt;[PATCH 0/7] V3D IGT Tests Updates&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/series/112215/&quot;&gt;[PATCH 0/2] Tests for V3D/VC4 Mmap BO IOCTLs&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/series/112370/&quot;&gt;[PATCH 0/4] Make sure v3d/vc4 support performance monitor&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;In Review&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/series/112363/&quot;&gt;[PATCH 0/6] V3D Job Submission Tests&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;In Review&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/series/112805/&quot;&gt;[PATCH 0/3] V3D Mixed Job Submission Tests&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;In Review&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;mesa&quot;&gt;&lt;a href=&quot;https://gitlab.freedesktop.org/mesa/mesa&quot;&gt;Mesa&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Apart from reading a lot of kernel code, I also started to explore some of the
Mesa code, especially the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3dv&lt;/code&gt; driver. On Mesa, I was trying to understand the
userspace use of the ioctls in order to create useful tests. While I was
exploring the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3dv&lt;/code&gt;, I was able to make two very simple contributions to Mesa:
fixing typos and initializing a variable in order to assure proper error
handling.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Patch&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Status&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://gitlab.freedesktop.org/mesa/mesa/-/commit/d34f3a1db594c778e0c6bae7a5798742edb9635d&quot;&gt;v3dv: fix multiple typos&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://gitlab.freedesktop.org/mesa/mesa/-/commit/a2252adde8235d5c4d78d9347527cd7914bb905a&quot;&gt;v3dv: initialize fd variable for proper error handling&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;igt-tests-to-vc4&quot;&gt;&lt;a href=&quot;https://gitlab.freedesktop.org/drm/igt-gpu-tools&quot;&gt;IGT&lt;/a&gt; tests to VC4&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;VC4 and V3D share some similarities in their basic 3D rendering implementation.
VC4 contains a 3D engine, and a display output pipeline that supports different
outputs. The display part of the VC4 is used on the Raspberry Pi 4 together with
the V3D driver.&lt;/p&gt;

&lt;p&gt;Although my main focus was on the V3D tests, as the VC4 and V3D drivers are kind
of similar, I was able to bring some improvements to the VC4 tests as well. I
added tests for perfmons and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vc4_mmap&lt;/code&gt; ioctl and improved a couple of
things in the tests, such as moving it a separate folder and creating a check to
skip the VC4 tests if they are running on a Raspberry Pi 4.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Patch/Series&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Status&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/series/110948/&quot;&gt;[PATCH 0/5] VC4 IGT Tests Updates&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/series/112215/&quot;&gt;[PATCH 0/2] Tests for V3D/VC4 Mmap BO IOCTLs&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/series/112370/&quot;&gt;[PATCH 0/4] Make sure v3d/vc4 support performance monitor&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;In Review&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/patch/516737/&quot;&gt;tests/vc4_purgeable_bo: Fix conditional assertion&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;In Review&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;linux-kernel&quot;&gt;&lt;a href=&quot;https://cgit.freedesktop.org/drm/drm-misc/&quot;&gt;Linux Kernel&lt;/a&gt;&lt;/h1&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;v3dvc4-drivers&quot;&gt;V3D/VC4 drivers&lt;/h2&gt;

&lt;p&gt;During this process of writing tests to IGT, I ended up reading a lot of kernel
code from V3D in order to evaluate possible userspace scenarios. While
inspecting some of the V3D code, I could find a couple of small things that
could be improved, such as using the DRM-managed API for mutexes and replacing
open-coded implementations with their DRM counterparts.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Patch&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Status&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/series/110634/&quot;&gt;drm/v3d: switch to drmm_mutex_init&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/series/110634/&quot;&gt;drm/v3d: add missing mutex_destroy&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/series/112257/&quot;&gt;drm/v3d: replace open-coded implementation of drm_gem_object_lookup&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Although I didn’t explore the VC4 driver as much as the V3D driver, I also took
a look at the driver, and I was able to detect a small thing that could be
improved: using the DRM-core helpers instead of open-code. Moreover, after a
report on the mailing list, I bisected a deadlock and I was able to fix it after
some study about the KMS locking system.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Patch&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Status&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/series/112299/&quot;&gt;drm/vc4: drop all currently held locks if deadlock happens&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/patch/516491/?series=112347&amp;amp;rev=1&quot;&gt;drm/vc4: replace drm_gem_dma_object for drm_gem_object in vc4_exec_info&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;In Review&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/patch/516490/?series=112347&amp;amp;rev=1&quot;&gt;drm/vc4: replace obj lookup steps with drm_gem_objects_lookup&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;In Review&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;the-debugfs-side-quest&quot;&gt;The debugfs side-quest&lt;/h2&gt;

&lt;p&gt;The debugfs side-quest was a total coincidence during this project. I had some
spare time and was looking for something to develop. While looking at the DRM
TODO list, I bumped into the debugfs clean-up task and found it interesting to
work on. So, I started to work on this task based on the previous work from
Wambui Karuga, who was a Outreachy mentee and worked on this feature during her
internship. By chance, when I talked to Melissa about it, she told me that she
had knowledge of this project due to a past Outreachy internship that she was
engaged on, and she was able to help me figure out the last pieces of
this side-quest.&lt;/p&gt;

&lt;p&gt;After submitting the first patch, introducing the debugfs device-centered
functions, and converting a couple of drivers to the new structure, I decided to
remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debugfs_init&lt;/code&gt; hook from a couple of drivers in order to get closer
to the goal of removing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debugfs_init&lt;/code&gt; hook. Moreover, during my last week
in the CE, I tried to write a debugfs infrastructure for the KMS objects, which
was another task in the TODO list, although I still need to do some rework on
this series.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Patch/Series&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Status&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/series/111216/&quot;&gt;[PATCH 0/7] Introduce debugfs device-centered functions&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/patch/517186/?series=112451&amp;amp;rev=1&quot;&gt;drm/debugfs: use octal permissions instead of symbolic permissions&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/patch/517185/?series=112451&amp;amp;rev=1&quot;&gt;drm/debugfs: add descriptions to struct parameters&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/series/112233/&quot;&gt;[PATCH 0/7] Convert drivers to the new debugfs device-centered functions&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/series/112684/&quot;&gt;[PATCH 0/13] drm/debugfs: Create a debugfs infrastructure for kms objects&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;In Review&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;more-side-quests&quot;&gt;More side-quests&lt;/h2&gt;

&lt;p&gt;By the end of the CE, I was on my summer break from university, so I had some
time to take a couple of side-quests in this journey.&lt;/p&gt;

&lt;p&gt;The first side-quest that I got into originated in a failed IGT test on the VC4,
the “addfb25-bad-modifier” IGT test. Initially, I proposed a fix only for the
VC4, but after some discussion in the mailing list, I decided to move forward
with the idea to create the check for valid modifiers in the DRM core. The
series is still in review, but I had some great interactions during the
iterations.&lt;/p&gt;

&lt;p&gt;The second side-quest was to understand why the IGT test &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kms_writeback&lt;/code&gt; was
causing a kernel oops in vkms. After some bisecting and some study about KMS’s
atomic API, I was able to detect the problem and write a solution for it. It was
pretty exciting to deal with vkms for the first time and to get some notion
about the display side of things.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Patch/Series&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Status&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/patch/505760/?series=109345&amp;amp;rev=1&quot;&gt;drm/tests: Split drm_test_dp_mst_calc_pbn_mode into parameterized tests&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/patch/505761/?series=109345&amp;amp;rev=1&quot;&gt;drm/tests: Split drm_test_dp_mst_sideband_msg_req_decode into parameterized tests&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/series/516047/&quot;&gt;tests/kms_addfb_basic: Avoid open-coded expressions&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/series/112546/&quot;&gt;[PATCH 0/3] Check for valid framebuffer’s format&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;In Review&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/series/112487/&quot;&gt;drm/vkms: reintroduce prepare_fb and cleanup_fb functions&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;A bit different from the end of GSoC, I’m not really sure what are going to be
my next steps in the next couple of months. The only thing I know for sure is
that I will keep contributing to the DRM subsystem and studying more about DRI,
especially the 3D rendering and KMS.&lt;/p&gt;

&lt;p&gt;The DRI infrastructure is really fascinating and there is so much to be learn!
Although I feel that I improved a lot in the last couple of months, I still feel
like a newbie in the community. I still want to have more knowledge of the DRM
core helpers and understand how everything glues together.&lt;/p&gt;

&lt;p&gt;Apart from the DRM subsystem, I’m also trying to take some time to program more
in Rust and maybe contribute to other open-source projects, like Mesa.&lt;/p&gt;

&lt;h1 id=&quot;acknowledgment&quot;&gt;Acknowledgment&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;I would like to thank my great mentors &lt;a href=&quot;https://melissawen.github.io/&quot;&gt;Melissa
Wen&lt;/a&gt; and &lt;a href=&quot;https://andrealmeid.com/&quot;&gt;André
Almeida&lt;/a&gt; for helping me through this journey. I
wouldn’t be able to develop this project without their great support and
encouragement. They were an amazing duo of mentors and I thank them for
answering all my questions and helping me with all the challenges.&lt;/p&gt;

&lt;p&gt;Also, I would like to thank the DRI community for reviewing my patches and
giving me constructive feedback. Especially, I would like to thank Daniel Vetter
for answering patiently every single question that I had about the debugfs
clean-up and to thank Jani Nikula, Maxime Ripard, Thomas Zimmermann, Javier
Martinez Canillas, Emma Anholt, Simon Ser, Iago Toral, Kamil Konieczny and
many others that took their time to review my patches, answer my questions and
provide me constructive feedback.&lt;/p&gt;
</description>
                <pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate>
                <link>https://mairacanal.github.io/january-update-finishing-my-igalia-ce/</link>
                <guid isPermaLink="true">https://mairacanal.github.io/january-update-finishing-my-igalia-ce/</guid>
            </item>
        
            <item>
                <title>November Update: Exploring V3D</title>
                
                <description>&lt;p&gt;It has been a busy couple of months. As I pointed on my last blog post, I finished GSoC and joined the &lt;a href=&quot;https://www.igalia.com/coding-experience/&quot;&gt;Igalia Coding Experience&lt;/a&gt; mentorship project. In October, I also traveled to Minneapolis for XDC 2022 where I presented to the Linux Graphics community our AMD/KUnit work with my colleagues. So, let’s make a summary of the last couple of months.&lt;/p&gt;

&lt;h1 id=&quot;xdc-2022&quot;&gt;XDC 2022&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;Just a small thank you note to X.Org Foundation for sponsoring my travel to Minneapolis. XDC 2022 was a great experience, and I learned quite a lot during the talks. Although I was a newcomer, all developers were very nice to me, and it was great to talk to experienced developers (and meet my mentors in person). Also, I presented the GSoC/XOrg work on the first day of the conference and this talk is available on &lt;a href=&quot;https://www.youtube.com/watch?v=nbRbM-Ld-44&amp;amp;t=3s&amp;amp;pp=ugMICgJwdBABGAE%3D&quot;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;working-with-the-raspberry-pi-4&quot;&gt;Working with the Raspberry Pi 4&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;As I mentioned in my last blog post, GSoC was a great learning experience and I’m willing to keep learning about the Linux graphics stack. Fortunately, when I started the Igalia CE, &lt;a href=&quot;https://melissawen.github.io/&quot;&gt;Melissa Wen&lt;/a&gt; pitched me a project to increase IGT test coverage on DRM/V3D kernel driver. I was pretty glad to hear about the project as it allowed me to learn more about how a GPU works.&lt;/p&gt;

&lt;h2 id=&quot;the-project&quot;&gt;The Project&lt;/h2&gt;

&lt;p&gt;Currently, V3D only has three basic IGT tests: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_get_bo_offset&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_get_param&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_mmap&lt;/code&gt;. So, the basic goal of my CE project was to add more tests to the V3D driver.&lt;/p&gt;

&lt;p&gt;As the general DRM-core tests were in a good shape on the V3D driver, I started to think together with my mentors about more driver-specific tests for the driver.&lt;/p&gt;

&lt;p&gt;By checking the V3D UAPI, you can see that the V3D has eleven ioctls, so there is yet a lot to test for the V3D on IGT.&lt;/p&gt;

&lt;p&gt;First, there are Buffer Object (BO) related-ioctls: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_create_bo&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_wait_bo&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_mmap_bo&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_get_bo_offset&lt;/code&gt;. The Buffer Objects are shared-memory objects that are allocated by the GPU to store things like vertex data. Therefore, testing them is important to make sure that memory is being correctly allocated. Different from the VC4, the V3D has an MMU between the GPU and the bus, allowing it to not allocate objects contiguously. Therefore, the idea was to develop tests for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_create_bo&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_wait_bo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, there are Performance Monitor (perfmon) related-ioctls: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_perfmon_create&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_perfmon_destroy&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_perfmon_get_values&lt;/code&gt;. Performance Monitors are basically registers that are used for monitoring the performance of the V3D engine. So, tests were designed to assure that the driver was creating perfmons properly and was resilient to incorrect requests, such as trying to get a value from a non-existent perfmon.&lt;/p&gt;

&lt;p&gt;And finally, the most interesting type of ioctls: the job submission ioctls. You can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_submit_cl&lt;/code&gt; ioctl to submit commands to the 3D engine, which is a tiled engine. When I think about tiled rendering, I always think about a &lt;a href=&quot;https://www.youtube.com/@RGMechEx&quot;&gt;Super Nintendo&lt;/a&gt;, but things can get a bit more complicated than a SNES as you can see &lt;a href=&quot;https://developer.samsung.com/galaxy-gamedev/resources/articles/gpu-framebuffer.html&quot;&gt;here&lt;/a&gt;. The 3D engine is composed of a bin and render pipelines, each has its command list. The binning step maps the tile to a piece of the frame and the rendering step renders the tile based on its mapping.&lt;/p&gt;

&lt;p&gt;By testing the v3d_submit_cl ioctl, it is possible to test syncing between jobs and also the &lt;a href=&quot;https://melissawen.github.io/blog/2022/05/10/multisync-p1&quot;&gt;V3D multisync ability&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Moreover, the V3D has also a TFU (texture formatting unit), and a CSD (compute shader dispatch), which has their ioctls: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_submit_tfu&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_submit_csd&lt;/code&gt;. The TFU makes format conversions and generated mipmaps and the CSD is responsible for dispatching a compute shader.&lt;/p&gt;

&lt;p&gt;So, the idea is to write tests for all those functionalities from V3D, increasing the testability of V3D on IGT. Although things are not yet fully-done, I’ve been enjoying and working exploring the V3D, IGT, and Mesa. After this experience with Mesa and also XDC, I became more and more interested in Mesa.&lt;/p&gt;

&lt;h2 id=&quot;a-noop-job&quot;&gt;A Noop Job…&lt;/h2&gt;

&lt;p&gt;In order to test the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_submit_cl&lt;/code&gt; ioctl, it was needed to design a job to be submitted. So, Melissa suggested using Mesa’s noop job specification on IGT to perform the tests. The idea was quite simple: submit a noop job and create tests based on it. But, it was not that simple after all…&lt;/p&gt;

&lt;p&gt;First, I must say that I’m mostly a kernel developer, so I was not familiar with Mesa. So, maybe it was not that hard to figure out, but I took a while to understand Mesa’s packet and how to submit them.&lt;/p&gt;

&lt;p&gt;The main problem I faced on submitting a noop job on IGT was: I would copy many and many Mesa files to IGT. And I took a while fighting against this idea, looking for other ways to submit a job to V3D. But, as some experience developers pointed out, packeting is the best option for it.&lt;/p&gt;

&lt;p&gt;After some time, I was able to bring the Mesa structure to IGT with a minimal (although not that minimal) overhead. But, I’m still not able to run a successful noop job as the job’s fence is not being signaled by the end of the job.&lt;/p&gt;

&lt;h2 id=&quot;series-submitted&quot;&gt;Series Submitted&lt;/h2&gt;

&lt;p&gt;Although my noop job has not landed yet, so far, I was able to submit two series to IGT: &lt;a href=&quot;https://patchwork.freedesktop.org/series/110681/&quot;&gt;one for the V3D driver&lt;/a&gt; and &lt;a href=&quot;https://patchwork.freedesktop.org/series/110948/&quot;&gt;the other for the VC4 driver&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Apart from cleanups in the drivers, I added tests for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_create_bo&lt;/code&gt; ioctl and the V3D’s and VC4’s perfmon ioctls. Moreover, as I was running the VC4 tests on the Raspberry Pi 4, I realized that most of the VC4 tests were failing on V3D, considering the VC4 doesn’t have rendering abilities on the Raspberry Pi 4. So, I also created checks to assure that the VC4 tests are not running on V3D.&lt;/p&gt;

&lt;p&gt;Those series are being reviewed yet, but I hope to get them merged soon.&lt;/p&gt;

&lt;h1 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;My biggest priority now is to run a noop job on IGT and for it, I’m currently running the CTS tests on the Raspberry Pi 4 in order to reproduce a noop job and understand why my current job is resulting in a hang. I added a couple of debug logs (aka &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf&lt;/code&gt;) on Mesa and now I can see the contents of the BOs and the parameters of the submission. So, I hope to get a fully-working noop job now.&lt;/p&gt;

&lt;p&gt;After I develop my fully working noop job, I will finish the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_wait_bo&lt;/code&gt; tests, so those only make sense if I submit a job and wait for a BO after it and design the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v3d_submit_cl&lt;/code&gt; tests as well. For this last one, I hope to test the syncing functionalities of V3D especially.&lt;/p&gt;

&lt;p&gt;Moreover, I hope to write soon a piece about cross-compiling CTS for the Raspberry Pi 4, which was a fun digression on this CE project.&lt;/p&gt;
</description>
                <pubDate>Thu, 08 Dec 2022 00:00:00 +0000</pubDate>
                <link>https://mairacanal.github.io/november-update-exploring-v3d/</link>
                <guid isPermaLink="true">https://mairacanal.github.io/november-update-exploring-v3d/</guid>
            </item>
        
            <item>
                <title>GSoC Final Report</title>
                
                <description>&lt;p&gt;My journey on the Google Summer of Code project passed by so fast… This is my
last week on the GSoC and those 14 weeks flew by! A lot of stuff happened during
those three months, and as I’m writing this blog post, I feel quite nostalgic
about this three months.&lt;/p&gt;

&lt;p&gt;Before I started GSoC, I never thought I would send so many patches to the
mailing list, have an abstract approved on XDC 2022, or have commit rights on
drm-misc.&lt;/p&gt;

&lt;p&gt;GSoC was indeed a fantastic experience. It gave me the opportunity to grow as a
developer in an open source community and I believe that I ended up GSoC with a
better understanding of what open source is. I learned more about the community,
how to communicate with them, and who are the actors in this workflow.&lt;/p&gt;

&lt;p&gt;So, this is a summary report of all my journey at GSoC 2022.&lt;/p&gt;

&lt;h1 id=&quot;contributions-during-gsoc-2022&quot;&gt;Contributions during GSoC 2022&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;First I will kick off with my non-related contributions. I mean, they are
somehow related to my project, but they are not exactly unit tests for AMDGPU.&lt;/p&gt;

&lt;h3 id=&quot;kworkflow&quot;&gt;kworkflow&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kworkflow/kworkflow&quot;&gt;kworkflow&lt;/a&gt; is a tool for reducing the
environment and setup overhead of developing for Linux, which is maintained by
my mentor Rodrigo Siqueira. I use it to manage my config files, deploy to my
testing machine, check code style, and more. Initially, kw didn’t have support
to deploy for Fedora-based machines.&lt;/p&gt;

&lt;p&gt;During the Community Bonding Period, I added support to deploy Fedora-based
machines and I wrote a bit about this story in this &lt;a href=&quot;https://mairacanal.github.io/kernel-development-fedora/&quot;&gt;blog
post&lt;/a&gt;.  Moreover, I
fixed a couple of bugs that I spotted while using it.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Patch&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Status&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/kworkflow/kworkflow/pull/601&quot;&gt;docs: dependencies: Add pv to Fedora dependencies&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/kworkflow/kworkflow/pull/602&quot;&gt;src: kwlib: check if the context is inside a git worktree&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/kworkflow/kworkflow/pull/613&quot;&gt;Add deploy support to Fedora-based systems&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://github.com/kworkflow/kworkflow/pull/649&quot;&gt;src: help: Fix renaming of configm to kernel-config-manager&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;igt&quot;&gt;IGT&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://gitlab.freedesktop.org/drm/igt-gpu-tools&quot;&gt;IGT GPU Tools&lt;/a&gt; is a
collection of tools for the development and testing of DRM drivers. During GSoC,
I ran the AMDGPU suite a couple of times on my testing machine with a single
display connected through HDMI. With this setup, I was able to detect a couple
of failures on the IGT tests and I reported some of those issues on the &lt;a href=&quot;https://gitlab.freedesktop.org/drm/amd/-/issues&quot;&gt;AMD bug
tracker&lt;/a&gt;, but also I sent two
patches fixing a couple of failures on the test.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Patch&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Status&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/patch/495078/&quot;&gt;[i-g-t,v2] tests/amdgpu: Skip multihead MPO tests on single display&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://patchwork.freedesktop.org/patch/497794/&quot;&gt;[i-g-t,v2] tests/amdgpu/amd_bypass: skip if connector is not DisplayPort&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;On Review&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;linux-kernel---kunit&quot;&gt;Linux Kernel - KUnit&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.kernel.org/dev-tools/kunit/&quot;&gt;KUnit&lt;/a&gt; is the Kernel Unit Testing
Framework. It is the framework we used for creating unit tests for the AMDGPU
drivers. My patches to KUnit are based on problems that I noticed I could
improve while I was writing unit tests for VBA. First, I fixed a simple
documentation error I spotted when I consulted the docs. The other patches are a
bit more interesting.&lt;/p&gt;

&lt;p&gt;While I was writing some tests, I realize I was using a lot of expectations such as:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_EQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And I also realize that the output of this expectation can be quite non-helpful,
as it only gives the output of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memcmp&lt;/code&gt; function. So, I created an
expectation macro for analyzing blocks of memory and outputs the hexdump of the
memory.&lt;/p&gt;

&lt;p&gt;It was a great community experience to interact with the KUnit developers and
work on their feedback.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Patch&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Status&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/linux-kselftest/20220720185719.273630-1-mairacanal@riseup.net/T/#u&quot;&gt;Documentation: KUnit: Fix example with compilation error&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/linux-kselftest/20220808125237.277126-2-mairacanal@riseup.net/&quot;&gt;kunit: Introduce KUNIT_EXPECT_MEMEQ and KUNIT_EXPECT_MEMNEQ macros&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/linux-kselftest/20220808125237.277126-3-mairacanal@riseup.net/&quot;&gt;kunit: Add KUnit memory block assertions to the example_all_expect_macros_test&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/linux-kselftest/20220808125237.277126-4-mairacanal@riseup.net/&quot;&gt;kunit: Use KUNIT_EXPECT_MEMEQ macro&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;linux-kernel---drm&quot;&gt;Linux Kernel - DRM&lt;/h3&gt;

&lt;p&gt;In the DRM subsystem, I contributed to the DRM unit tests, which used to be
selftests and I converted them to KUnit during an LKCamp hackathon with other
students. I explained more about those tests in this &lt;a href=&quot;https://mairacanal.github.io/from-selftests-to-KUnit/&quot;&gt;blog
post&lt;/a&gt;.  After those
patches were merged, I dedicated myself to some janitorial duties on the tests
folders: fixing stack warnings, refactoring some tests, and making the naming
more consistent.&lt;/p&gt;

&lt;p&gt;Also, this summer, I &lt;a href=&quot;https://gitlab.freedesktop.org/freedesktop/freedesktop/-/issues/450&quot;&gt;applied for commit
rights&lt;/a&gt; on
the drm-misc repository and it was approved. I got pretty glad to have commit
rights, although I believe it is such a huge responsibility and I plan to use
this right very carefully.  I must thank my mentor Melissa Wen for encouraging
me to ask for commit rights and for sharing her knowledge about the community
and maintainership models (and also for answering a thousand questions I had
about dim).&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Patch&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Status&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/dri-devel/20220708203052.236290-1-maira.canal@usp.br/T/#m3e0a2a318c5e1689c6a984d2bd4a5679e858eeff&quot;&gt;drm: selftest: convert drm_damage_helper selftest to KUnit&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/dri-devel/20220708203052.236290-1-maira.canal@usp.br/T/#mf58d435b607096449365fd5d3819302d3ca548c6&quot;&gt;drm: selftest: convert drm_cmdline_parser selftest to KUnit&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/dri-devel/20220708203052.236290-1-maira.canal@usp.br/T/#m5f3b4cbaa011ea730d7017fcd193e6b1b7d7bae8&quot;&gt;drm: selftest: convert drm_rect selftest to KUnit&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/dri-devel/20220708203052.236290-1-maira.canal@usp.br/T/#m5725eabec8f19609ed68bce362da7239a10e3ff2&quot;&gt;drm: selftest: convert drm_format selftest to KUnit&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/dri-devel/20220708203052.236290-1-maira.canal@usp.br/T/#m32d0d32fac5f1ef5a67c5844acc6e1793e0b4d53&quot;&gt;drm: selftest: convert drm_plane_helper selftest to KUnit&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/dri-devel/20220708203052.236290-1-maira.canal@usp.br/T/#m0434c83b951ad9db5d6cf99abdb7244191246ebd&quot;&gt;drm: selftest: convert drm_dp_mst_helper selftest to KUnit&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/dri-devel/20220708203052.236290-1-maira.canal@usp.br/T/#m35dddb45de1ee298e1076c44334af736cc881a38&quot;&gt;drm: selftest: convert drm_framebuffer selftest to KUnit&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/dri-devel/20220708203052.236290-1-maira.canal@usp.br/T/#m54ddcbd30df811ef9ec704cc70fa04c24e0f7f8c&quot;&gt;drm: selftest: convert drm_buddy selftest to KUnit&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/dri-devel/20220708203052.236290-1-maira.canal@usp.br/T/#m25364c46c57f6513cd1c04588fb8c7e35c0eaa63&quot;&gt;drm: selftest: convert drm_mm selftest to KUnit&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/dri-devel/20220729124726.748221-1-mairacanal@riseup.net/T/#u&quot;&gt;drm/tests: Split up test cases in igt_check_drm_format_min_pitch&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/dri-devel/20220828182543.155415-1-mairacanal@riseup.net/T/#u&quot;&gt;drm/mm: Reduce stack frame usage in __igt_reserve&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;On Review&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/dri-devel/20220901124210.591994-1-mairacanal@riseup.net/T/#mf7a08ad198b95199a4beec1cdbe4c25b24771f72&quot;&gt;drm/tests: Split drm_framebuffer_create_test into parameterized tests&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;On Review&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/dri-devel/20220901124210.591994-1-mairacanal@riseup.net/T/#mfded29eaff1d5209f5a9c27ab952a367121520d4&quot;&gt;drm/tests: Change “igt_” prefix to “test_drm_”&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;On Review&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;linux-kernel---amdgpu&quot;&gt;Linux Kernel - AMDGPU&lt;/h3&gt;

&lt;p&gt;Most of my patches to the AMDGPU branch were ideas that I had while writing the
unit tests on VBA. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;display_mode_vba&lt;/code&gt; files were automatically generated,
which means that the code might not be the most readable one. During the summer,
I had a couple of ideas for cleaning up a bit of the VBA files and some of those
ideas are documented in this &lt;a href=&quot;https://mairacanal.github.io/does-the-linux-kernel-need-software-engineering/&quot;&gt;blog
post&lt;/a&gt;.
And most of my patches are related to this matter.&lt;/p&gt;

&lt;p&gt;But, most of the patches I sent related to the VBA files weren’t merged and
there was also no feedback on the patches. Some were sent multiple times, but I
didn’t get an answer. The DML is a very sensitive part of the AMDGPU driver, so
big changes might not be suitable for them.&lt;/p&gt;

&lt;p&gt;Moreover, there are a couple of fixes. My favorite one is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drm/amdgpu: Fix
use-after-free on amdgpu_bo_list mutex&lt;/code&gt;, which was a fix to a use-after-free
problem that appeared in the &lt;a href=&quot;https://lore.kernel.org/dri-devel/CABXGCsM58-8fxVKAVkwsshg+33B_1_t_WesG160AtVBe1ZvKiw@mail.gmail.com/&quot;&gt;mailing
list&lt;/a&gt;.
It was fun to read the output provided in the mailing-list and then track the
bug based on the trace. Also, it was a really nice interaction with other
developers on the mailing list.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Patch&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Status&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/amd-gfx/20220630185005.908140-1-mairacanal@riseup.net/T/#u&quot;&gt;drm/amd/display: Remove return value of Calculate256BBlockSizes&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/amd-gfx/20220630201741.991501-1-mairacanal@riseup.net/T/#u&quot;&gt;drm/amd/display: Remove duplicate code across dcn30 and dcn31&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/amd-gfx/20220630215316.1078841-1-mairacanal@riseup.net/T/#u&quot;&gt;drm/amd/display: Remove unused variables from vba_vars_st&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/amd-gfx/94dad704-d81a-7dc2-423d-1f728bcb5548@riseup.net/T/#m329c95bbd613b7d3368a7a675a1dd90b3cce70af&quot;&gt;drm/amdgpu: Write masked value to control register&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/amd-gfx/94dad704-d81a-7dc2-423d-1f728bcb5548@riseup.net/T/#m4c0a16330b7574782a201f10b67d5ea744b601a4&quot;&gt;drm/amd/display: Change get_pipe_idx function scope&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/amd-gfx/94dad704-d81a-7dc2-423d-1f728bcb5548@riseup.net/T/#mcfd965e613d064800a6a82a54e064e8e3e949cc3&quot;&gt;drm/amd/display: Remove unused clk_src variable&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/amd-gfx/94dad704-d81a-7dc2-423d-1f728bcb5548@riseup.net/T/#m1f2614742170fe4b2238427cf36dcb98f06b05e5&quot;&gt;drm/amd/display: Remove unused dml32_CalculatedoublePipeDPPCLKAndSCLThroughput function&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/amd-gfx/94dad704-d81a-7dc2-423d-1f728bcb5548@riseup.net/T/#m2eb569fdabada2d7ae430770bd84ae5c5021cef5&quot;&gt;drm/amd/display: Remove unused NumberOfStates variable&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/amd-gfx/94dad704-d81a-7dc2-423d-1f728bcb5548@riseup.net/T/#mf1cd1a70ece1c995a9fef2481a0d4524df92ee3f&quot;&gt;drm/amd/display: Remove unused variables from dml_rq_dlg_get_dlg_params&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/amd-gfx/94dad704-d81a-7dc2-423d-1f728bcb5548@riseup.net/T/#m96df7c5e1ee5fcbb05c157cce660540920d42579&quot;&gt;drm/amd/display: Remove unused value0 variable&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;On Review&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/amd-gfx/94dad704-d81a-7dc2-423d-1f728bcb5548@riseup.net/T/#m5406d98a3e27102d07028c2059a151be8bff04d5&quot;&gt;drm/amd/display: Remove unused variables from dcn10_stream_encoder&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/amd-gfx/94dad704-d81a-7dc2-423d-1f728bcb5548@riseup.net/T/#m4dbd50a2e1006e0544da24d523c8fd9b4efa22b4&quot;&gt;drm/amd/display: Remove unused MaxUsedBW variable&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/amd-gfx/94dad704-d81a-7dc2-423d-1f728bcb5548@riseup.net/T/#m64fe69263faf9c3d434c4d757857e3e8937272f2&quot;&gt;drm/amd/display: Remove parameters from dml30_CalculateWriteBackDISPCLK&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Rejected&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/amd-gfx/aaf722ef-7ead-9d88-ec66-0ab269b65a8f@igalia.com/T/#m1a29f8055054a95f03d47932ac3f303ab24ce7c1&quot;&gt;drm/amd/display: Drop dm_sw_gfx7_2d_thin_l_vp and dm_sw_gfx7_2d_thin_gl&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;On Review&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/amd-gfx/aaf722ef-7ead-9d88-ec66-0ab269b65a8f@igalia.com/T/#m2738ab7461b351dd06e74f2787ddd9134c5a9388&quot;&gt;drm/amd/display: Remove duplicated CalculateWriteBackDISPCLK&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;On Review&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/amd-gfx/aaf722ef-7ead-9d88-ec66-0ab269b65a8f@igalia.com/T/#m9e24bbe5084ccc37117a58e72e2afd6d2a419f1f&quot;&gt;drm/amd/display: Remove parameters from rq_dlg_get_dlg_reg&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;On Review&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/amd-gfx/aaf722ef-7ead-9d88-ec66-0ab269b65a8f@igalia.com/T/#ma7a739d910814895f6d98c6374d1f1dca24ee1b4&quot;&gt;drm/amd/display: Rewrite CalculateWriteBackDISPCLK function&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;On Review&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/amd-gfx/13140020-8139-64f9-51b1-2b71c9b673af@amd.com/T/#m81d3f8826c1247bd0b737f3469943881f0d6484f&quot;&gt;drm/amd/display: Remove unused struct freesync_context&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/amd-gfx/20220728182047.264825-1-mairacanal@riseup.net/T/#m50433ff9ec6f795bf0564ac0edb90c1a8d7e56e4&quot;&gt;[PATCH 00/16] Remove entries from struct vba_vars_st&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;On Review&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/amd-gfx/20220801124006.89027-1-mairacanal@riseup.net/T/#u&quot;&gt;drm/amd/display: Drop XFCEnabled parameter from CalculatePrefetchSchedule&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;On Review&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/amd-gfx/20220815113931.53226-1-mairacanal@riseup.net/T/#u&quot;&gt;drm/amdgpu: Fix use-after-free on amdgpu_bo_list mutex&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/dri-devel/20220818132730.399334-1-mairacanal@riseup.net/T/#u&quot;&gt;drm/amd/display: Include missing header&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;Accepted&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;the-kunit-amdgpu-tests&quot;&gt;The KUnit AMDGPU Tests&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;After this huge tangent, let’s jump into the real milestones of the GSoC
project. Making a small recapitulation of the idea of my project:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Display Mode Library (DML) is a fundamental part of the AMDGPU driver. It
involves lots of complex calculations and a large number of parameters. That
said, it points to itself as a great candidate for the implementation of unit
tests. Unit tests will help graphic developers recognize bugs before they are
merged into the mainline and make it possible for a future code refactor. This
project intends to implement unit testing in the Display Mode VBA libraries,
especially the Display Mode VBA public API and the DCN20’s Display Mode VBA
functions.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;In my project, the deliverables were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Eleven unit tests for all the public functions on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;display_mode_vba&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;display_mode_vba20&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Five blog posts on the progress, problems, concepts, and all.&lt;/li&gt;
  &lt;li&gt;Run the unit tests on the AMDGPU Radeon RX 5700 XT.&lt;/li&gt;
  &lt;li&gt;Write documentation for the tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, let’s discuss point by point the milestones of this summer.&lt;/p&gt;

&lt;h3 id=&quot;the-unit-tests-and-documentation&quot;&gt;The Unit Tests and Documentation&lt;/h3&gt;

&lt;p&gt;First, I had the intention to write unit tests for all the public functions on
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;display_mode_vba&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;display_mode_vba20&lt;/code&gt;, which are eleven functions in
total. Initially, it seems like a good idea to test only the public functions,
which is usually recommended by Software Engineering authors.&lt;/p&gt;

&lt;p&gt;I started following this plan, but as I was learning more about unit testing, I
started questioning the feasibility of tests for some functions. I mean, a couple
of functions had &lt;strong&gt;more than 45 input parameters&lt;/strong&gt; and &lt;strong&gt;more than a thousand
lines&lt;/strong&gt;. Checking all the possible code branches of those tests seemed to me
unfeasible because there were a lot of variables to be considered.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As the function size and the number of parameters grow, the complexity of the
tests grows exponentially.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;So, I ended up writing tests for some static VBA functions. In the end, I wrote
more than eleven unit tests but the functions for which they were written are
not the same as planned initially.&lt;/p&gt;

&lt;p&gt;The functions were chosen by two means. First, I was trying to identify
functions with a more suitable behavior for unit tests. Basically, functions
with no more than 10 parameters and 100 lines. Also, I was looking for functions
that were used a lot in the code, in order to increase the coverage and the
relevance of the tests. But also, sometimes,  Siqueira would suggest some
functions outside of VBA, such as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dc_dmub_srv&lt;/code&gt; case, which was inspired on
a regression.&lt;/p&gt;

&lt;p&gt;Moreover, I also wrote documentation for the tests, giving instructions on how
to run the tests and how to add more tests to the AMDGPU driver.&lt;/p&gt;

&lt;p&gt;The patches with the test suites and documentation are listed here:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Patch&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Status&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/dri-devel/20220831172239.344446-1-mairacanal@riseup.net/T/#m3a62416af08cd8cef240508798f6072722200573&quot;&gt;drm/amd/display: Introduce KUnit tests to the bw_fixed library&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;On Review&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/dri-devel/20220831172239.344446-1-mairacanal@riseup.net/T/#m55ea9a62f44c3dcf65542078e1c3acbc03dd792d&quot;&gt;drm/amd/display: Introduce KUnit tests to the display_mode_vba library&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;On Review&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/dri-devel/20220831172239.344446-1-mairacanal@riseup.net/T/#mcc325378f9ff07c2666f3a0b4d0eb4160d9d8ace&quot;&gt;drm/amd/display: Introduce KUnit to dcn20/display_mode_vba_20 library&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;On Review&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/dri-devel/20220831172239.344446-1-mairacanal@riseup.net/T/#mbd33411310664d71abe907c6b21688c498e8e680&quot;&gt;drm/amd/display: Introduce KUnit tests to dc_dmub_srv library&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;On Review&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;https://lore.kernel.org/dri-devel/20220831172239.344446-1-mairacanal@riseup.net/T/#m9973c9d5a7f45ce223fc9724fa548e7ef570a0d1&quot;&gt;Documentation/gpu: Add Display Core Unit Test documentation&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;On Review&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The tests are not merged yet and are currently on the second version, but there
are some good changes that the tests will be merged soon to the mainline.&lt;/p&gt;

&lt;p&gt;Moreover, I was able to run all the unit tests developed on the AMDGPU Radeon RX
5700 XT, and also with the kunit-tool.&lt;/p&gt;

&lt;h3 id=&quot;the-blog-posts&quot;&gt;The Blog Posts&lt;/h3&gt;

&lt;p&gt;During the summer, I wrote five blog posts about challenges that I found
interesting in my journey. All blog posts are listed here:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Date&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Post&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;May 26, 2022&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://mairacanal.github.io/gsoc-22/&quot;&gt;I’m in GSoC ‘22&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Jun 11, 2022&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://mairacanal.github.io/kernel-development-fedora/&quot;&gt;Linux Kernel Developing with Fedora&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Jul 11, 2022&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://mairacanal.github.io/kernel-symbol-table-compilation-more/&quot;&gt;About Kernel Symbol Table, Compilation, and more&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Jul 19, 2022&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://mairacanal.github.io/from-selftests-to-KUnit/&quot;&gt;From Selftests to KUnit&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Aug 10, 2022&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://mairacanal.github.io/does-the-linux-kernel-need-software-engineering/&quot;&gt;Does the Linux Kernel need software engineering?&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;more-than-just-code&quot;&gt;More than just code&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;During this summer, I was able to evolve my community skills also. Before I
joined GSoC, I didn’t though I had enough knowledge to review code from others
or even read the mailing list. Now, I have more confidence to review and test
some patches (and even commit a patch).&lt;/p&gt;

&lt;p&gt;During GSoC, I developed the habit to read the mailing list daily. Although I
don’t really get everything that is going on there, I read a couple of threads
and try to understand what is being discussed. And it became a fun part of my
day to open Thunderbird and read the mailing lists from AMDGPU, DRM, KUnit, and
Fedora Devel.&lt;/p&gt;

&lt;p&gt;Moreover, during my mailing list readings, I was able to find some discussions
that I could contribute to and even review patches. Initially, I didn’t have
confidence enough to send a Reviewed-by, so I used to send just a Tested-by.
But, now I feel more courage to send a Reviewed-by and make an argument for my
points on the mailing lists.&lt;/p&gt;

&lt;p&gt;I made more than a dozen interactions on the mailing list, so I will just list
the more relevant ones:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;My first Tested-by:&lt;/strong&gt; This was after some interaction with David Gow on the
AMDGPU Unit Tests RFC. I stated the need for enabling tests to link to the
AMDGPU module and this culminated in some patches for it, where I sent my
&lt;a href=&quot;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=3d6e44623841c8b82c2157f2f749019803fb238a&quot;&gt;Tested-by&lt;/a&gt;.
Also this discussion was the inspiration for this &lt;a href=&quot;https://mairacanal.github.io/kernel-symbol-table-compilation-more/&quot;&gt;blog
post&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Documentation Reviews on KUnit:&lt;/strong&gt; I reviewed a couple of KUnit
documentation patches, such as
&lt;a href=&quot;https://lore.kernel.org/lkml/Yt+wq+xo2Tp6oEF%2F@debian.me/T/&quot;&gt;1&lt;/a&gt; and
&lt;a href=&quot;https://lore.kernel.org/all/20220822022646.98581-1-tales.aparecida@gmail.com/&quot;&gt;2&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Spot an error in an IGT patch:&lt;/strong&gt; This is a &lt;a href=&quot;https://patchwork.freedesktop.org/patch/491515/&quot;&gt;simple
one&lt;/a&gt;, but it make me realize
that I was about to help with my reviews.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reported a failing KUnit test:&lt;/strong&gt; I was checking LKFT some day, and I
realized that some KUnit tests were failing in all architectures. So, I &lt;a href=&quot;https://lore.kernel.org/all/346cb279-8e75-24b0-7d12-9803f2b41c73@riseup.net/&quot;&gt;sent
an
email&lt;/a&gt;
reporting the failure to the tests’s author and &lt;a href=&quot;https://lore.kernel.org/all/cover.1661234636.git.sander@svanheule.net/&quot;&gt;he fixed the
tests&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PowerPC Compilation Fixes:&lt;/strong&gt; On the same day I sent a patch fixing a
PowerPC warning on the DRM tests, Melissa asked me how I cross-compiled for
PPC on IRC as she was working on a PPC warning. I was happy I could help her
with this &lt;del&gt;after some hours of failing to cross-compile for PPC.&lt;/del&gt; This resulted
in other
&lt;a href=&quot;https://lore.kernel.org/lkml/20220720193208.1131493-1-mwen@igalia.com/T/&quot;&gt;review&lt;/a&gt;
and also a great interaction.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Moreover, I also
&lt;a href=&quot;https://cgit.freedesktop.org/drm/drm-misc/log/?qt=committer&amp;amp;q=Ma%C3%ADra+Canal&quot;&gt;committed&lt;/a&gt;
two patches on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drm-misc-next&lt;/code&gt;. I reviewed to patches for improving the DRM
KUnit tests and by the end of the review, I usually wait for someone to push the
patches into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drm-misc-next&lt;/code&gt;, but as those patches were on the list for a while,
I decided to push it myself. I was pretty afraid of doing something wrong, but
all went fine with a bit of help from Melissa.&lt;/p&gt;

&lt;h1 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;Well, I’m pretty excited about the next couple of months for many reasons.
First, I, &lt;a href=&quot;https://magalilemes.github.io/&quot;&gt;Magali Lemes&lt;/a&gt;, and &lt;a href=&quot;https://crosscat.me/&quot;&gt;Isabella
Basso&lt;/a&gt; will be attending XDC 2022. It is going to be very
exciting to participate in an in-place conference and also to make a
presentation on the main track.&lt;/p&gt;

&lt;p&gt;We are going to talk about the “KUnit sorcery and the uncanny nature of FPU in
the DRM” on October 4th, presenting a bit of our GSoC project. So, currently,
I’m training a lot to make a good presentation in October.&lt;/p&gt;

&lt;p&gt;Moreover, I intend to keep contributing to the DRM subsystem, and currently, I
have some ideas for some code refactors of the DRM KUnit tests. Also, I would
like to expand my contributions on the DRM to not only test-related. Although I
do like to write unit tests, I want to learn more about planes, CRTC, color
management, memory management, and more. Currently, most of my contributions are
related to janitorial duties and I would like to contribute to implementing new
features on the DRM or improving the DRM core.&lt;/p&gt;

&lt;p&gt;Finally, by the end of GSoC, I’ll be joining another mentorship project on the
Linux Graphics Stack, the &lt;a href=&quot;https://www.igalia.com/coding-experience/&quot;&gt;Igalia Coding
Experience&lt;/a&gt;, in which I will be learning
more about the DRM subsystem and IGT in the next months. This is making me very
excited, as I will continue to contribute with open source, especially the Linux
kernel, with the help of my great mentors Melissa Wen and André Almeida, who are
software engineers on Igalia.&lt;/p&gt;

&lt;h1 id=&quot;acknowledgment&quot;&gt;&lt;strong&gt;Acknowledgment&lt;/strong&gt;&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;First, I would like to thank my mentors Rodrigo Siqueira, Melissa Wen, and André
Almeida. They really believed in our potential, encouraged us to talk to the
community, and show us some great opportunities. They were an amazing team of
mentors and I will always be thankful to them. Without them, I would probably
never would had submitted a project to GSoC.&lt;/p&gt;

&lt;p&gt;Also, I would like to thank the X.Org Foundation for accepting
my proposal to GSoC and also helping us with funding for XDC 2022.&lt;/p&gt;

&lt;p&gt;Moreover, I would like to thank AMD for donating hardware for us. During the
project, I used a Radeon RX 5700 XT donated by them, so I’m also very thankful
to them. Moreover, I would like to thank all AMD engineers that took their time
to review my patches and send feedback.&lt;/p&gt;

&lt;p&gt;Finally, I would like to thank the DRI community for reviewing my patches and
giving me constructive feedback. Also, the KUnit community, especially David
Gow, Daniel Latypov, and Brendan Higgins, review a lot of my patches and took
their time to meet with us this summer.&lt;/p&gt;

&lt;p&gt;Last, but not least, I thank the companionship of my colleagues Isabella Basso,
Magali Lemes, and Tales Aparecida during this summer. It was great to have some
companions to solve problems this summer and to share knowledge.&lt;/p&gt;
</description>
                <pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate>
                <link>https://mairacanal.github.io/gsoc-final-report/</link>
                <guid isPermaLink="true">https://mairacanal.github.io/gsoc-final-report/</guid>
            </item>
        
            <item>
                <title>Does the Linux Kernel need software engineering?</title>
                
                <description>&lt;p&gt;For those looking for a short answer: yes, it does.&lt;/p&gt;

&lt;p&gt;Now, we can dive into a more elaborate answer.&lt;/p&gt;

&lt;p&gt;Software engineering is a more systematic approach to software development,
which involves the definition, implementation, measurement, management, change,
and improvement of the software lifecycle. When we think about software through
this lens, we must also think about software requirements, design, construction,
testing, and &lt;strong&gt;maintenance.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Software engineering improves software maintainability, scalability, and
security. Moreover, makes it easier to add testing to the software stack. This
approach makes the software &lt;strong&gt;more robust&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A little glossary for some software engineering terms: &lt;br /&gt;
&lt;strong&gt;- Maintainability:&lt;/strong&gt; how easy is it to repair, improve or understand a
software artifact? After finishing your product, you must continue to fix bugs,
optimize functionalities and refactor code to avoid future problems. &lt;br /&gt;
&lt;strong&gt;- Scalability:&lt;/strong&gt; how easy is it to grow or shrink a software artifact? &lt;br /&gt;
&lt;strong&gt;- Testability:&lt;/strong&gt; how easy is it to test a software artifact? Does the function
has suitable hooks for testing?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Many people might believe that it is not possible to do software engineering on
the Linux Kernel, or even that software engineering is not needed. From what I
see, these beliefs come from two statements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;It is not possible to apply software engineering with C:&lt;/strong&gt; sometimes
software engineering is only associated with Object-Oriented Programming
languages.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Software engineering is not needed as we are working with drivers:&lt;/strong&gt; as
drivers are theoretically finite, we don’t have to think about their
expansion and maintainability.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If we follow those beliefs, we might end up with poorly designed code. And,
when badly designed code grows, I assure you that we are going to see code
repetition, dead code, insanely large functions, and bugs.&lt;/p&gt;

&lt;p&gt;But, the worst of all: when we have a huge codebase with lots of bad code
practices, maintainability becomes hard and software quality will decrease
more and more.&lt;/p&gt;

&lt;p&gt;So, let’s first understand why those two beliefs are false.&lt;/p&gt;

&lt;h2 id=&quot;software-engineering-with-c&quot;&gt;Software Engineering with C&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;You might say: how can I use my fancy design patterns, avoid code repetition,
and make beautiful polymorphism when I don’t have classes?&lt;/p&gt;

&lt;p&gt;And okay, you are right! Design Patterns in C++ are much easier and more
natural to understand and implement. In C++ you can create a hierarchy
to represent a family of devices, and this feature comes out of the box.
But we can translate those concepts to C.&lt;/p&gt;

&lt;p&gt;C is a &lt;em&gt;structured language,&lt;/em&gt; but we can write object-oriented programs in C. In
this sense, libraries and structs are your main allies. Moreover, you can use
function pointers to create polymorphism in C.&lt;/p&gt;

&lt;p&gt;For example, if I want to write a simple queue in C, I can use the following
approach:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef QUEUE_H_
#define QUEUE_H_
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isFull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* Constructor and destructors */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Queue_Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isFullFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmptyFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSizeFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insertFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;removeFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Queue_Cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* Operations */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Queue_isFull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Queue_isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Queue_getSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Queue_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Queue_remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Queue_Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Queue_Destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that I can have polymorphism using this approach. As I can create a new
struct that inherits Queue, such as:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CachedQueue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CachedQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CachedQueue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* new attributes */&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numberElementsOnDisk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* aggregation in subclass */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* inherited virtual function */&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isFull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CachedQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CachedQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CachedQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CachedQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CachedQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* new virtual functions */&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CachedQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CachedQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay, this is incredible! It is &lt;strong&gt;POLYMORPHISM&lt;/strong&gt; in C. And there is much more on
this topic in the book &lt;a href=&quot;https://www.amazon.com.br/Design-Patterns-Embedded-Systems-Engineering/dp/1856177076&quot;&gt;“Design Patterns for Embedded Systems in C”&lt;/a&gt;,
by Bruce Powel Douglass. I love this book and I learned a lot from with it. Moreover,
there is an awesome talk by Renato Geh and Matheus Tavares in the Linux Developer
Conference Brazil 2019 about &lt;a href=&quot;https://www.youtube.com/watch?v=x0ELqk2lCcI&quot;&gt;“Object Oriented Techniques in C: A Case Study on
Git and Linux”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, you can see that fancy software architecture can be done on C. And don’t get
me wrong, there are some beautiful abstractions in Linux that use these
concepts, such as the Virtual File System (VFS). Moreover, some libraries
provide great APIs, such as the DRM subsystem.&lt;/p&gt;

&lt;p&gt;But sometimes this is not used in the implementation of drivers. And this takes
us to the next point: yes, drivers need to be properly designed on the software
side.&lt;/p&gt;

&lt;h2 id=&quot;drivers-should-be-designed-as-pieces-of-software&quot;&gt;Drivers should be designed as pieces of software&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Here I must say that: my opinion is extremely biased by the Display Mode VBA
library. For the last month, I have been writing unit tests for this library as
part of my GSoC project. I got quite impressed (maybe not in a good way) with
the amount of code repetition in the code and also with the &lt;strong&gt;huge&lt;/strong&gt; functions.&lt;/p&gt;

&lt;p&gt;And this is not a roast on AMDGPU code: AMD does a great job for the free
software community and it is incredible that we have an open-source driver for a
major graphics retailer. Moreover, I’m sure that this problem also exists in
other parts of the kernel, so, I believe it is a good point to discuss.&lt;/p&gt;

&lt;p&gt;Let’s start from the premise that drivers are finite: you can grab the
datasheet, code the hardware to the end of its features and finish the driver.
And I might even say that you are right: drivers are finite. But, hardware
companies don’t usually create one single product with singular characteristics:
they usually create a product line, and sometimes product lines have children:
another product line with some upgrades on the previous one.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;💡 Product lines having children… For an OOP programmer, this sounds like a
beautiful case for inheritance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, if you have a product line, are you going to create a file for each product?
And for the product with a couple of features added, are you going to paste the
previous driver and change a couple of hundreds of lines? This doesn’t seem like
a great option, for a couple of reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Duplicate Code:&lt;/strong&gt; you are duplicating the code and &lt;strong&gt;the bugs as well&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Test Coverage:&lt;/strong&gt; are you going to duplicate the tests also?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Maintainability:&lt;/strong&gt; especially in the maintenance phase of a project, the
less code the better.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You see, it all comes down to &lt;strong&gt;maintainability.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a great example of code reuse, you can check out the IIO subsystem.
Hardware manufacturers such as Maxim and Analog Devices Inc usually have
chips that share the same register map or share functionalities. Instead of
creating a driver for each chip, developers write one single driver and add
the compatible device IDs on the Device Table. For example, you can check the
Maxim MAX1027 ADC driver, which is compatible with the MAX1027, MAX1029,
MAX1031, MAX1227, MAX1229, and MAX1231. So we have one single driver for six
devices: this is great for maintainability!&lt;/p&gt;

&lt;p&gt;In this case, if I find a bug, I can make one single modification, and send
one single patch, the maintainer will review one single time, and all runs
smoothly.&lt;/p&gt;

&lt;p&gt;Now, let’s take a look at the DML folder from the AMD’s Display Core, more
specifically the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;display_mode_vba&lt;/code&gt; files from DCN20 and DCN21. See that
these product lines are pretty similar, so maybe we can reuse a lot of the
code.&lt;/p&gt;

&lt;p&gt;But, if you check the directory, you can see that we have three different
files: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;display_mode_vba_20.c&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;display_mode_vba_20v2.c&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;display_mode_vba_21.c&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;💡  You can check the difference between the files through: &lt;br /&gt;
	  &lt;strong&gt;$ diff drivers/gpu/drm/amd/display/dc/dml/dcn20/display_mode_vba_20.c drivers/gpu/drm/amd/display/dc/dml/dcn20/display_mode_vba_20v2.c&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And much of the code is identical: I mean there are functions that don’t
change a line! This hits pretty hard on maintainability.&lt;/p&gt;

&lt;p&gt;Now, if I find a bug, I need to make three modifications. Moreover, I might
not even know that the code is duplicated, so I might only fix the bug in one
place and leave the other files untouched. Then another developer might find
the same bug once again, and will have to send it to the maintainer, who will
have to review it one more time. &lt;strong&gt;This is a lot of rework!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And if I could guess a reason for AMD to copy and paste the code so many
times, I would point out another maintainability issue: &lt;strong&gt;the functions are
huge!&lt;/strong&gt; Some functions from the VBA files have more than a thousand lines.&lt;/p&gt;

&lt;p&gt;These huge functions from the VBA files implicate that if you want to change
a couple of lines for your new product lines you need to copy and paste the
whole function.&lt;/p&gt;

&lt;p&gt;Ideally, from the principles of the Clean Code book, we would like to have
small functions that should be simple and do one thing only. And I know: this
is not applicable in 100% of the cases, but I cannot find a good reason for a
function to be so huge and have dozens of parameters.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;💡 Other than the readability, those huge functions also hurt the stack pretty badly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Huge functions really hurt the readability, understandability, and testability
of the code. Moreover, they make it difficult to avoid code duplication as the
function has dozens of side effects.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;More glossary for some software engineering terms: &lt;br /&gt;
&lt;strong&gt;- Readability:&lt;/strong&gt; how easily a software artifact can be read? &lt;br /&gt;
&lt;strong&gt;- Understandability:&lt;/strong&gt; how easily a software artifact can be comprehend?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But this is not a dead end for the AMDGPU’s DML code: I mean, the AMDGPU driver
works awesomely on Linux, and code refactoring is always an option.&lt;/p&gt;

&lt;h2 id=&quot;we-can-think-about-software&quot;&gt;We can think about software!&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;At this moment, we might conclude that as the AMDGPU driver is open-source, then
we can fix those issues in the code. But it is definitely not safe to simply
tear down the code and rewrite it in one single patch set, as the AMDGPU driver
has to remain functional on Linux.&lt;/p&gt;

&lt;p&gt;One way to fix this is through unit testing to ensure the code is properly
refactored. Though, throughout my GSoC project, I ended up noticing that it is
not possible to write a unit test for a thousand-line function. A huge function
has many side effects and testing each one of them is not feasible.&lt;/p&gt;

&lt;p&gt;Maybe for Display Mode VBA unit testing is not the only way to go. We probably
could first break the functions into smaller, self-contained pieces, as this
will help to create better tests, to improve readability, and to reduce the
stack size.&lt;/p&gt;

&lt;p&gt;Now with smaller functions, it is more feasible to share code across the &lt;a href=&quot;https://docs.kernel.org/gpu/amdgpu/display/dcn-overview.html&quot;&gt;DCNs&lt;/a&gt;
and create a common interface for them.&lt;/p&gt;

&lt;p&gt;This refactor can lead to the use of those design patterns I talked about
earlier and make the DML more maintainable and readable. We can think about the
use of inheritance where we have a base library, from which DCN20 can extend,
and then DCN21 can extend from DCN20. And this is how those three huge files can
become three small files.&lt;/p&gt;

&lt;p&gt;And this refactor can start piece by piece:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Unifying the parameters:&lt;/strong&gt; don’t pass the parameters by copying if the
parameters are in the common struct. The stack will thank this change!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Splitting the functions:&lt;/strong&gt; make smaller, more readable functions.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Writing tests for the functions&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Creating a common interface:&lt;/strong&gt; here is where the design patterns come
in.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This way we can make a safer refactor as unit testing is not viable. This
doesn’t mean that we are not going to introduce any bugs in the process, but
having a structured plan will help us avoid them.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I must say: this is the opinion of someone that came straight out of the
university, thinking about well-structured code. So, I might be utopian about
software engineering. I understand that the developers at AMD are doing their
best and are working hard to provide the best features for us, Linux users.&lt;/p&gt;

&lt;p&gt;But thinking of software is the best way to ensure the maintainability of our
code, and bad code practices will prove costly one day or another.&lt;/p&gt;
</description>
                <pubDate>Wed, 10 Aug 2022 00:00:00 +0000</pubDate>
                <link>https://mairacanal.github.io/does-the-linux-kernel-need-software-engineering/</link>
                <guid isPermaLink="true">https://mairacanal.github.io/does-the-linux-kernel-need-software-engineering/</guid>
            </item>
        
            <item>
                <title>From Selftests to KUnit</title>
                
                <description>&lt;p&gt;Last week, the &lt;a href=&quot;https://lore.kernel.org/dri-devel/20220708203052.236290-1-maira.canal@usp.br/T/#t&quot;&gt;series&lt;/a&gt; with DRM Kernel Selftests conversion to KUnit tests was merged into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drm-misc-next&lt;/code&gt; and will probably be on the mainline on 5.20.&lt;/p&gt;

&lt;p&gt;This series was developed during an &lt;a href=&quot;https://lkcamp.dev/&quot;&gt;LKCAMP&lt;/a&gt; hackathon in October 2021 and is the combined effort of seven Linux Kernel beginners. In this hackathon, we learned about the KUnit Framework and also learned a bit about DRM.&lt;/p&gt;

&lt;p&gt;The series took quite a while to come out, as it was just a side-project to most of us, but, in June, I finally prepared the patches and transformed them into a mergeable series.&lt;/p&gt;

&lt;p&gt;So, let’s understand the differences between kselftests and KUnit tests and learn some about the KUnit framework.&lt;/p&gt;

&lt;h2 id=&quot;testing-testing-testing&quot;&gt;Testing… Testing… Testing…&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Tests are not all the same. We create different kinds of tests for different purposes. So, let’s clarify some kinds of tests that will be quoted in this blogpost:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Unit Testing:&lt;/strong&gt; tests individual units or components with the purpose to validate each unit of the software code and check whether they are performing as expected. A unit test should be the finest granularity of testing and as such should allow all possible code paths to be tested in the code under test.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Functional Testing:&lt;/strong&gt; validates the software system against functional requirements. So, basically, the system is tested against the function requirement/specification.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Regression Testing:&lt;/strong&gt; tests that ensure that a code change does not affect the functionality of the existing software product.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;what-is-kselftest&quot;&gt;What is Kselftest?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.kernel.org/dev-tools/kselftest.html&quot;&gt;Linux Kernel Selftests (kselftest)&lt;/a&gt; is a set of features functional and regression tests developed to avoid regressions on the Linux Kernel. The idea is that the developer will find a regression, fix it, and then write a test so that the Kernel won’t have this regression again.&lt;/p&gt;

&lt;p&gt;The kselftests use shell scripts and C programs to load the tests into the kernel and have support for hardware-dependent tests. It doesn’t support workload or application tests, as its idea is primarily to increase the breadth and depth test coverage on the Kernel.&lt;/p&gt;

&lt;p&gt;Although not designed for it, unit tests can also be developed with kselftests. But noticed that it is not a Unit Test Framework, such as JUnit, Google Test, or PyTest.&lt;/p&gt;

&lt;p&gt;kselftest has C interfaces for reporting test results using the Test Anything Protocol (TAP) and a test harness for running tests.&lt;/p&gt;

&lt;h2 id=&quot;what-is-kunit&quot;&gt;What is KUnit?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.kernel.org/dev-tools/kunit/index.html&quot;&gt;KUnit (Kernel Unit Testing Framework)&lt;/a&gt; is the Unit Testing Framework for the Linux Kernel. KUnit makes it possible to run test suites on kernel boot or load the tests as a module. It reports all test case results through a TAP (Test Anything Protocol) in the kernel log.&lt;/p&gt;

&lt;p&gt;KUnit follows the white-box testing approach, which allows testers to inspect and verify the inner workings of a software system. So, it can test any kernel component and is not restricted to userspace.&lt;/p&gt;

&lt;p&gt;KUnit doesn’t require installing the kernel on a test machine or in a VM. It addresses the problem of being able to run tests without needing a virtual machine or actual hardware with User Mode Linux.&lt;/p&gt;

&lt;p&gt;KUnit provides facilities for defining unit test cases, grouping related test cases into test suites, providing common infrastructure for running tests, and much more.&lt;/p&gt;

&lt;h2 id=&quot;how-to-choose-a-framework&quot;&gt;How to choose a framework?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Each one of the frameworks has its place and importance, as both kinds of tests are important to improve Kernel’s reliability and robustness.&lt;/p&gt;

&lt;p&gt;The main difference between kselftest and KUnit is that &lt;strong&gt;KUnit is a unit testing framework&lt;/strong&gt; and &lt;strong&gt;kselftest is not&lt;/strong&gt;. kselftest requires installing the kernel on a test machine or in a VM and require tests to be written in userspace and run on the kernel under test. On the other side, KUnit does not.&lt;/p&gt;

&lt;p&gt;So, when it comes to testing a single unit of code in isolation, you’ll definitely go with KUnit. Otherwise, you’ll have to check the kselftests or autotests frameworks.&lt;/p&gt;

&lt;h2 id=&quot;why-drm-selftests-were-plausible-for-a-conversion&quot;&gt;Why DRM selftests were plausible for a conversion?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;First, I must point out that the DRM selftests are not kselftests. They work very similarly, but the DRM subsystem developed a unique structure for running their unit tests, which was available on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drm_selftests.h&lt;/code&gt;. For a general idea, they had simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FAIL_ON(expression)&lt;/code&gt; assertions, indicating that the test would fail if the expression was true, and each test was a module initialized by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run_selftests&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, let’s check a DRM selftest function and analyze it to check if it’s plausible for conversion. Take this function from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drivers/gpu/drm/selftests/drm_cmdline_selftests.h&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drm_cmdline_test_force_D_only_not_digital&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ignored&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drm_cmdline_mode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;FAIL_ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drm_mode_parse_command_line_for_connector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
							   &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no_connector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
							   &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;FAIL_ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specified&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;FAIL_ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;refresh_specified&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;FAIL_ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bpp_specified&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;FAIL_ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;FAIL_ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cvt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;FAIL_ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interlace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;FAIL_ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;margins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;FAIL_ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;force&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DRM_FORCE_ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This test function is testing a single function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drm_mode_parse_command_line_for_connector&lt;/code&gt; and using test assertion to check if it behaves as expected. Can we agree that this is testing a single unit of code in isolation? So, this is a unit test!&lt;/p&gt;

&lt;p&gt;If you look through the other files, you are going to find out that they are very similar to this function. So, they are all unit tests.&lt;/p&gt;

&lt;p&gt;As they are unit tests, it is more suitable to use a Unit Test Framework, such as KUnit, on these tests. Moreover, converting these tests to KUnit would make them smaller and provide a userspace tool for developers to test with.&lt;/p&gt;

&lt;p&gt;There is also one more reason to convert the DRM selftests. As DRM selftests created a whole structure to run their unit tests, converting the tests would mean deleting this structure and promoting code reuse.&lt;/p&gt;

&lt;h2 id=&quot;converting-the-tests&quot;&gt;Converting the tests&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;KUnit has multiple test expectation expressions. The most used ones are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KUNIT_EXPECT_TRUE (test, condition)&lt;/code&gt;: causes a test failure when the expression is not true.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KUNIT_EXPECT_FALSE (test, condition)&lt;/code&gt;: causes a test failure when the expression is not false.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KUNIT_EXPECT_EQ (test, left, right)&lt;/code&gt;: expects that &lt;strong&gt;left&lt;/strong&gt; and &lt;strong&gt;right&lt;/strong&gt; are equal.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KUNIT_EXPECT_NE (test, left, right)&lt;/code&gt;: expects that &lt;strong&gt;left&lt;/strong&gt; and &lt;strong&gt;right&lt;/strong&gt; are not equal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a couple more and all of them can be seen on the &lt;a href=&quot;https://docs.kernel.org/dev-tools/kunit/api/test.html&quot;&gt;KUnit documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Examining again the  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drm_mode_parse_command_line_for_connector&lt;/code&gt; function, we can see that the test expectation expression used is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FAIL_ON&lt;/code&gt;. This means that the test will fail when the expression inside it is true. Checking the test expectation expressions listed above, we can say the equivalent of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FAIL_ON&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KUNIT_EXPECT_FALSE&lt;/code&gt;, right?&lt;/p&gt;

&lt;p&gt;So, we can just adjust the function to the KUnit signature and change all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FAIL_ON&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KUNIT_EXPECT_FALSE&lt;/code&gt;. The result will be something like this:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drm_cmdline_test_force_D_only_not_digital&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kunit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drm_cmdline_mode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drm_mode_parse_command_line_for_connector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
							   &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no_connector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
							   &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specified&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;refresh_specified&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bpp_specified&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cvt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interlace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;margins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;force&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DRM_FORCE_ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After this, our test already works with the KUnit tool. But, there is still some improvement to be made. Check out the first assertion:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drm_mode_parse_command_line_for_connector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
							   &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no_connector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
							   &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Observe that the condition has a logical NOT operator, so, for the condition to be false, the function must return true. So, we can change the assertion to be more readable to:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drm_mode_parse_command_line_for_connector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
							   &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no_connector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
							   &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The last assertion can also be changed. We can change the comparative logical operator for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KUNIT_EXPECT_EQ&lt;/code&gt; expression.&lt;/p&gt;

&lt;p&gt;So, the final look of our unit test would be:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drm_cmdline_test_force_D_only_not_digital&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kunit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drm_cmdline_mode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drm_mode_parse_command_line_for_connector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
							   &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no_connector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
							   &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;specified&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;refresh_specified&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bpp_specified&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cvt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interlace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;margins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_EQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;force&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DRM_FORCE_ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is just a small bit of the work done! I and other LKCAMP participants converted tests across nine files. And the result can be seen on this &lt;a href=&quot;https://lore.kernel.org/dri-devel/20220708203052.236290-1-maira.canal@usp.br/T/#t&quot;&gt;mailing list thread&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Working on these tests over the last month was pretty satisfying. The series had five iterations over the mailing list and talking to the maintainers is very rewarding. Also, it was great to remember the Saturday that I spend with three very dear friends (thanks to Arthur, Matheus, and Carlos). Seeing the patches go to the mainline was great!&lt;/p&gt;

&lt;p&gt;After adding the DRM KUnit tests to the upstream, we must maintain it working properly and try checking the reported bugs. For example, Guenter Roeck reported problems running tests on PowerPC, so I worked on a new &lt;a href=&quot;https://lore.kernel.org/dri-devel/20220717184336.1197723-1-mairacanal@riseup.net/T/#u&quot;&gt;patch&lt;/a&gt; to fix it in order to make things run smoothly. So, that’s about it for now!&lt;/p&gt;
</description>
                <pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate>
                <link>https://mairacanal.github.io/from-selftests-to-KUnit/</link>
                <guid isPermaLink="true">https://mairacanal.github.io/from-selftests-to-KUnit/</guid>
            </item>
        
            <item>
                <title>About Kernel Symbol Table, Compilation, and more</title>
                
                <description>&lt;p&gt;This week I was planning on talking about Device Mocking with KUnit, as I’m currently working on my first unit test for a physical device, the AMDGPU Radeon RX5700. I would introduce you to the Kernel Unit Testing Framework (KUnit), how it works, how to mock devices with it, and why it is so great to write tests.&lt;/p&gt;

&lt;p&gt;But, my week was pretty more interesting due to a limitation on the KUnit Framework. This got me thinking about the Kernel Symbol Table and compilation for a while. So, I decided to write about it this week.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;When starting the GSoC project, my fellow colleagues and I ran straight into a problem with the use of KUnit on the AMDGPU stack.&lt;/p&gt;

&lt;p&gt;We would create a simple test, just like this one:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;kunit/test.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&quot;inc/bw_fixed.h&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;abs_i64_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kunit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_EQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0ULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs_i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0LL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/* Argument type limits */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_EQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX_I64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs_i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX_I64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;KUNIT_EXPECT_EQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX_I64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs_i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIN_I64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kunit_case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bw_fixed_test_cases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;KUNIT_CASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abs_i64_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kunit_suite&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bw_fixed_test_suite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dml_calcs_bw_fixed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_cases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bw_fixed_test_cases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;kunit_test_suite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bw_fixed_test_suite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ok, pretty simple test: just checking the boundary values for a function that returns the absolute value of a 64-bit integer. Nothing could go wrong…&lt;/p&gt;

&lt;p&gt;And, at first, running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kunit-tool&lt;/code&gt; everything would go fine. But, if we tried to compile the test as a module, we would get a linking error:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Multiple definitions of &apos;init_module&apos;/&apos;cleanup_module&apos; at kunit_test_suites().
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This looks like a simple error, but if we think further this is a matter of kernel symbols and linking. So, let’s hop on and understand the basics of kernel symbols and linking. Finally, I will tell the end of this KUnit tell.&lt;/p&gt;

&lt;h2 id=&quot;the-stages-of-compilation&quot;&gt;The Stages of Compilation&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/compilation-stack.png&quot; alt=&quot;The Stages of Compilation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First, it is important to understand the stages of the compilation of a C program. If you’re a C-veteran, you can skip this section. But if you are starting in the C-programming world recently (or maybe just used to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make&lt;/code&gt; without thinking further), let’s understand a bit more about the compilation process for C programs - basically any compiled language.&lt;/p&gt;

&lt;p&gt;The first stage of compilation is &lt;strong&gt;preprocessing.&lt;/strong&gt; The preprocessor expands the included files - a.k.a. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.h&lt;/code&gt;, expands the macros, and removes the comments. Basically, the preprocessor obeys to the directives, that is, the commands that begin with #.&lt;/p&gt;

&lt;p&gt;The second stage of compilation is &lt;strong&gt;compiling.&lt;/strong&gt; The compiling stage takes the preprocessor’s output and produces either assembly code or an &lt;em&gt;object file&lt;/em&gt; as output. The object code contains the binary machine code that is generated from compiling the C source.&lt;/p&gt;

&lt;p&gt;Then, we got to the &lt;strong&gt;linking&lt;/strong&gt; stage. Linking takes one or more object files and produces the product of the final compilation. This output can be a shared library or an executable.&lt;/p&gt;

&lt;p&gt;For our problem, the linking stage is the interesting one. In this stage, the linker links all the object files by replacing the references to undefined symbols with the appropriate addresses. So, at this stage, we get the missing definitions or multiple definitions errors.&lt;/p&gt;

&lt;p&gt;When &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ld&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lld&lt;/code&gt; for those at the clang community), tells us that there are missing definitions, it means that either the definitions don’t exist, or that the object files or libraries where they reside are not provided to the linker. For the multiple definition errors, the linker is telling us that the same symbol was defined in two different object files or libraries.&lt;/p&gt;

&lt;p&gt;So, going back to our error, we now know that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The linker generates this error.&lt;/li&gt;
  &lt;li&gt;We are defining the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init_module()/cleanup_module()&lt;/code&gt; twice.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But, if you check the code, there is no duplicate of either of those functions. 🤔&lt;/p&gt;

&lt;p&gt;Ok, now, let’s take a look at the kernel symbol table.&lt;/p&gt;

&lt;h2 id=&quot;kernel-symbols-table&quot;&gt;Kernel Symbols Table&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;So, we keep talking about symbols. But now, we need to understand which symbols are visible and available to our module and which aren’t.&lt;/p&gt;

&lt;p&gt;We can think of the kernel symbols in three levels of visibility:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;static:&lt;/strong&gt; visible only inside their compilation unit.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;external:&lt;/strong&gt; potentially visible to any other code built into the kernel.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;exported:&lt;/strong&gt; visible and available to any loadable module.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, by quoting the book &lt;em&gt;Linux Kernel Development&lt;/em&gt; (3nd ed.), p. 348:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When modules are loaded, they are dynamically linked into the kernel. As with userspace, dynamically linked binaries can call only into external functions explicitly &lt;em&gt;exported&lt;/em&gt; for use. In the kernel, this is handled via special directive called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPORT_SYMBOL()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPORT_SYMBOL_GPL()&lt;/code&gt;.
Export functions are available for use by modules. Functions not exported cannot be invoked from modules. The linking and invoking rules are much more stringent for modules than code in the core kernel image. Core code can call any nonstatic interface in the kernel because all core source files are linked into a single base image. Exported symbols, of course, must be nonstatic, too. The set of exported kernel symbols are known as the &lt;em&gt;exported kernel interfaces.&lt;/em&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;So, at this point, you can already get this statement, as you already understand about linking ;)&lt;/p&gt;

&lt;p&gt;The kernel symbol table can be pretty important in debugging and you can check the list of symbols in a module with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nm&lt;/code&gt; command. Moreover, sometimes you want more than just the symbols from a module, but the symbols from the whole kernel. In this case, you can check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/kallsyms&lt;/code&gt; file: it contains symbols of dynamically loaded modules as well as symbols from static code.&lt;/p&gt;

&lt;p&gt;Also, during a kernel build, a file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Module.symvers&lt;/code&gt; will be generated. This file contains all exported symbols from the kernel and compiled modules. For each symbol, the corresponding CRC value, export type, and namespace are also stored.&lt;/p&gt;

&lt;p&gt;Building an out-of-tree module is not trivial, and you can check the kbuild docs &lt;a href=&quot;https://docs.kernel.org/kbuild/modules.html&quot;&gt;here&lt;/a&gt;, to understand more about symbols, how to install modules, and more.&lt;/p&gt;

&lt;p&gt;Now, you have all the pieces needed to crack this puzzle. But I only gave you separate pieces of this problem. It’s time to bring these pieces together.&lt;/p&gt;

&lt;h2 id=&quot;how-to-solve-this-linking-problem&quot;&gt;How to solve this linking problem?&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Let’s go back to the linking error we got at the test:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Multiple definitions of &apos;init_module&apos;/&apos;cleanup_module&apos; at kunit_test_suites().
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, first, we need to understand how we are defining &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init_module&lt;/code&gt; multiple times. The first definition is at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kunit_test_suites()&lt;/code&gt;. So, when building a KUnit test as a module, KUnit creates brand new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module_init/exit_module&lt;/code&gt; functions.&lt;/p&gt;

&lt;p&gt;But, think for a while with me… The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amdgpu&lt;/code&gt; module, linked with our test, already defines a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module_init&lt;/code&gt; function for the graphics module.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;FYI: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module_init&lt;/code&gt; is the module entry point when the module is loaded.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;So, we have figured out the problem! We have one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init_module&lt;/code&gt; at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kunit_test_suites()&lt;/code&gt;  and other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init_module&lt;/code&gt; at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amdgpu&lt;/code&gt; entry point, which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amdgpu_drv.c&lt;/code&gt;. And, as they are linked together, we have a linking problem!&lt;/p&gt;

&lt;p&gt;And, how can we solve this problem?&lt;/p&gt;

&lt;h3 id=&quot;solutions-inside-the-tests&quot;&gt;Solutions inside the tests&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPORT_SYMBOL&lt;/code&gt; to all tested functions&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Going back to the idea of the Kernel Symbol Table, we can load the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amdgpu&lt;/code&gt; module and expose all the tested functions to any loadable module by adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPORT_SYMBOL&lt;/code&gt;. Then, we can compile the test module independently - that said, outside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amdgpu&lt;/code&gt; module - and loaded separately.&lt;/p&gt;

    &lt;p&gt;It feels like an easy fix, right? Not exactly! This would pollute the symbol namespace from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amdgpu&lt;/code&gt; module and also pollute the code. Polluting the code means more work to maintain and work with the code. So, this is not a good idea.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Incorporating the tests into the driver stack&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Another idea is to call the tests inside the driver stack. So, inside the AMDGPU’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init_module&lt;/code&gt; function, we can call the KUnit’s private suite execution function and run the tests when the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amdgpu&lt;/code&gt; module is loaded.&lt;/p&gt;

    &lt;p&gt;It is the strategy that some drivers, such as thunderbolt, were using. But, this introduces some incompatibilities with the KUnit tooling, as it makes it impossible to use the great &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kunit-tool&lt;/code&gt;  and also doesn’t scale pretty well. If I want to have multiple modules with tests for a single driver, it would require the use of many &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#ifdef&lt;/code&gt; guards and the creation of awful init functions in multiple files.&lt;/p&gt;

    &lt;p&gt;Creating a test should be simple: not a huge structure with preprocessor directives and multiple files.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;a-better-solution-changing-how-kunit-calls-modules&quot;&gt;A better solution: changing how KUnit calls modules&lt;/h3&gt;

&lt;p&gt;The previous solutions were a workaround for the real problem: KUnit was stealing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module_init&lt;/code&gt; from other modules. For built-in tests,  the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kunit_test_suite()&lt;/code&gt; macro adds a list of suites in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.kunit_test_suites&lt;/code&gt; linker section. However, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module_init()&lt;/code&gt; function is used for kernel modules to run the test suites.&lt;/p&gt;

&lt;p&gt;So, after some discussion on the KUnit Mailing List, Jeremy Kerr unified the module and non-module KUnit init formats. David Gow submitted a patch from him removing the KUnit-defined module inits, and instead parsing the KUnit tests from their own section in the module.&lt;/p&gt;

&lt;p&gt;Now, the array of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct kunit_suite *&lt;/code&gt; will be placed in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.kunit_test_suites&lt;/code&gt; ELF section and the tests will run on the module load.&lt;/p&gt;

&lt;p&gt;You can check the &lt;a href=&quot;https://lore.kernel.org/linux-kselftest/20220709032001.819487-1-davidgow@google.com/&quot;&gt;version 4&lt;/a&gt; of this patchset.&lt;/p&gt;

&lt;p&gt;Having this structure will make our work on GSoC much easier, and much cleaner! Huge thanks to all KUnit folks working on this great framework!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Getting this problem is not trivial! When it comes to compilation, linking, and, symbols, many CS students get pretty confused. In contrast, this is a pretty poetic part of computation: seeing these high-level symbols becoming simple assembly instructions and thinking about memory stacks.&lt;/p&gt;

&lt;p&gt;If you are feeling a bit confused over this, I hugely recommend the Tanenbaum books and also &lt;em&gt;Linux Kernel Development&lt;/em&gt; by Robert Love. Although Tanenbaum doesn’t write specifically about compilation, the knowledge of Compute Architecture and Operational Systems is fundamental to understanding the idea of running binaries on a machine.&lt;/p&gt;
</description>
                <pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate>
                <link>https://mairacanal.github.io/kernel-symbol-table-compilation-more/</link>
                <guid isPermaLink="true">https://mairacanal.github.io/kernel-symbol-table-compilation-more/</guid>
            </item>
        
    </channel>
</rss>
